{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Library API",
    "description": "A simple Express Library API"
  },
  "components": {
    "securitySchemes": {
      "jwt": {
        "type": "http",
        "scheme": "bearer",
        "in": "header",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "jwt": []
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "paths": {
    "/job/gateSecurityUpdate": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Update Gate Security Details",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request to update gate security details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "vehicleDetail": {
                  "type": "object",
                  "properties": {
                    "vehicleType": {
                      "type": "string",
                      "example": "Car"
                    },
                    "vehicleRcImage": {
                      "type": "string",
                      "example": "base64-encoded-image"
                    },
                    "vehicleInsuranceImage": {
                      "type": "string",
                      "example": "base64-encoded-image"
                    },
                    "driverLicenseImage": {
                      "type": "string",
                      "example": "base64-encoded-image"
                    },
                    "uploadPictureImage": {
                      "type": "string",
                      "example": "base64-encoded-image"
                    }
                  }
                },
                "invoiceNo": {
                  "type": "string",
                  "example": "INV12345"
                },
                "purchaseOrderNo": {
                  "type": "string",
                  "example": "PO12345"
                },
                "shipmentDetail": {
                  "type": "string",
                  "example": "Shipment details"
                },
                "specialRequest": {
                  "type": "string",
                  "example": "Special request details"
                },
                "incoterms": {
                  "type": "string",
                  "example": "Incoterms details"
                },
                "vehicleDocVerified": {
                  "type": "boolean",
                  "example": true
                },
                "otlLockingSystem": {
                  "type": "string",
                  "example": "Locking system details"
                },
                "otlImage": {
                  "type": "string",
                  "example": "base64-encoded-image"
                },
                "currentTask": {
                  "type": "string",
                  "example": "Current task details"
                },
                "unload": {
                  "type": "string",
                  "example": "Unload details"
                },
                "subtask": {
                  "type": "string",
                  "example": "Subtask details"
                },
                "pallet": {
                  "type": "string",
                  "example": "Pallet details"
                },
                "binAllocate": {
                  "type": "string",
                  "example": "Bin allocation details"
                },
                "relocate": {
                  "type": "string",
                  "example": "Relocation details"
                },
                "comments": {
                  "type": "string",
                  "example": "Comments"
                },
                "appointmentStatus": {
                  "type": "string",
                  "example": "Appointment status"
                },
                "createdBy": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "isVerified": {
                  "type": "boolean",
                  "example": true
                },
                "bookingDate": {
                  "type": "string",
                  "example": "2023-09-02"
                },
                "bookingTime": {
                  "type": "string",
                  "example": "08:30 AM"
                },
                "type": {
                  "type": "integer",
                  "example": 1
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job updated successfully"
          },
          "400": {
            "description": "Job not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/getDocumentByID": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Get Document by ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request to get a document by ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "type": {
                  "type": "integer",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Document not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/getALLConsignmentID": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Get All Consignment IDs",
        "description": "Retrieve a list of all consignment IDs.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/bayAllocateToJob": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Allocate Bay to Job",
        "description": "Allocate a bay to a job with specified details.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b>Req param's: </b> bayId - The ID of the bay to allocate, _id - The ID of the job to which the bay is allocated, specifyDetails - Additional details for the allocation.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "bayId": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "specifyDetails": {
                  "type": "string",
                  "example": "Allocation details"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bay allocated successfully"
          },
          "400": {
            "description": "Validation error or Bay is already occupied"
          },
          "404": {
            "description": "Bay or Job not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/delete": {
      "delete": {
        "tags": [
          "Job"
        ],
        "summary": "Delete Job",
        "description": "Delete a job by its ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b>Req param's: </b> _id - The ID of the job to delete",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job deleted successfully"
          },
          "500": {
            "description": "Job not found or Internal Server Error"
          }
        }
      }
    },
    "/job/gateSecurityList": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Gate Security List",
        "description": "Retrieve a list of jobs filtered by various parameters such as consignment ID, status, search term, and gate ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request parameters for filtering job list",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "consignmentId": {
                  "type": "string",
                  "example": "1234567890"
                },
                "status": {
                  "type": "string",
                  "example": "1"
                },
                "searchTerm": {
                  "type": "string",
                  "example": "specialRequest"
                },
                "gateId": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/getById": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Get Job by ID",
        "description": "Retrieve job details by specifying its unique ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request parameters for retrieving a job by ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation Error"
          },
          "404": {
            "description": "Job Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/detail": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Get Job Details",
        "description": "Retrieve detailed job information by specifying its unique ID (jobId).",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request parameters for retrieving job details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Job Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/consignments": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Get List of Consignments",
        "description": "Retrieve a list of consignment IDs from the jobs in the database.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Data Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/log": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Get Job Logs",
        "description": "Retrieve logs for a specific job based on its ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b>Request Body:</b> Provide the job ID to fetch logs.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation Error"
          },
          "404": {
            "description": "Job Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/skuCreate": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Create or Update SKU Details",
        "description": "Create or update SKU details for a job. You can provide SKU details in the request body or upload an Excel file (xlsx).",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "multipart/form-data",
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing job ID, SKU details, warehouse ID, and company user ID.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64ce4978c8323e4912d2c319"
                },
                "skuDetails": {
                  "type": "object",
                  "properties": {
                    "msku": {
                      "type": "string",
                      "description": "SKU identifier",
                      "example": "TSKCSK12"
                    },
                    "title": {
                      "type": "string",
                      "description": "SKU title",
                      "example": "Product1"
                    },
                    "information": {
                      "type": "string",
                      "description": "SKU information",
                      "example": "Some information about the product"
                    },
                    "units": {
                      "type": "integer",
                      "description": "Expected quantity of SKU",
                      "example": 10
                    },
                    "uom": {
                      "type": "string",
                      "description": "Unit of measurement",
                      "example": "kg"
                    }
                  },
                  "required": ["msku", "title", "information", "units", "uom"]
                },
                "wareHouseId": {
                  "type": "string",
                  "description": "ID of the warehouse",
                  "example": "64e392500cfde4487cbbdcb6"
                },
                "companyUserId": {
                  "type": "string",
                  "description": "ID of the company user",
                  "example": "64df682c87b8dae6f4a40db5"
                }
              },
              "required": ["_id", "skuDetails", "wareHouseId", "companyUserId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation Error"
          },
          "404": {
            "description": "Job Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/skuUpdate": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Update SKU Details",
        "description": "Update SKU details for a job.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing job ID and updated SKU details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64ce4978c8323e4912d2c319"
                },
                "skuDetails": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "ID of the SKU detail to update",
                      "example": "64d0f98a8fe9fe8cb60c5532"
                    },
                    "msku": {
                      "type": "string",
                      "description": "SKU identifier",
                      "example": "TSKCSK12"
                    },
                    "title": {
                      "type": "string",
                      "description": "SKU title",
                      "example": "Product1"
                    },
                    "information": {
                      "type": "string",
                      "description": "SKU information",
                      "example": "Some information about the product"
                    },
                    "units": {
                      "type": "integer",
                      "description": "Expected quantity of SKU",
                      "example": 10
                    },
                    "uom": {
                      "type": "string",
                      "description": "Unit of measurement",
                      "example": "kg"
                    },
                    "wareHouseId": {
                      "type": "string",
                      "description": "ID of the warehouse",
                      "example": "64e392500cfde4487cbbdcb6"
                    },
                    "companyUserId": {
                      "type": "string",
                      "description": "ID of the company user",
                      "example": "64df682c87b8dae6f4a40db5"
                    }
                  },
                  "required": ["_id", "msku", "title", "information", "units", "uom"]
                }
              },
              "required": ["_id", "skuDetails"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation Error"
          },
          "404": {
            "description": "Job Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/skuDelete": {
      "delete": {
        "tags": ["Job"],
        "summary": "Delete a SKU detail from a job",
        "description": "Delete a SKU detail from a job and log the action.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing job ID and SKU detail ID.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64a25edb6f94c53b2c836466"
                },
                "skuDetailsId": {
                  "type": "string",
                  "description": "ID of the SKU detail to delete",
                  "example": "64a26089e8dee7e80a8b6e47"
                }
              },
              "required": ["_id", "skuDetailsId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "SKU detail deleted successfully."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Job not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/job/inboundCreate": {
      "post": {
        "tags": ["Job"],
        "summary": "Create a new inbound job",
        "description": "Create a new inbound job and generate a consignment ID.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing inbound job details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "ID of the client",
                  "example": "64e399089c8d7ce1ff80f8f3"
                },
                "companyUserId": {
                  "type": "string",
                  "description": "ID of the company user",
                  "example": "64df682c87b8dae6f4a40db5"
                },
                "wareHouseId": {
                  "type": "string",
                  "description": "ID of the warehouse",
                  "example": "64e392500cfde4487cbbdcb6"
                }
              },
              "required": ["clientId", "companyUserId", "wareHouseId"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbound job created successfully."
          },
          "400": {
            "description": "Bad request."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
      
    },
    "/job/inboundUpdate": {
      "post": {
        "tags": ["Job"],
        "summary": "Update inbound job details",
        "description": "Update inbound job details and optionally notify the user.",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Request body containing inbound job details and notification flag.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64d32a38f681b6742162eab7"
                },
                "ifNotifyTrue": {
                  "type": "boolean",
                  "description": "A flag to indicate whether to send a notification (true/false)"
                },
                "consignmentDetail": {
                  "type": "string",
                  "description": "Consignment detail"
                },
                "vehicleDetail": {
                  "type": "object",
                  "properties": {
                    "vehicleNo": {
                      "type": "string",
                      "description": "Vehicle number"
                    },
                    "ewayBill": {
                      "type": "string",
                      "description": "E-way bill"
                    },
                    "containerNo": {
                      "type": "string",
                      "description": "Container number"
                    },
                    "companyUserId": {
                      "type": "string",
                      "description": "ID of the company user",
                      "example": "64df682c87b8dae6f4a40db5"
                    },
                    "wareHouseId": {
                      "type": "string",
                      "description": "ID of the warehouse",
                      "example": "64e392500cfde4487cbbdcb6"
                    }
                  },
                  "required": ["vehicleNo", "ewayBill", "containerNo"]
                },
                "invoiceNo": {
                  "type": "string",
                  "description": "Invoice number"
                },
                "purchaseOrderNo": {
                  "type": "string",
                  "description": "Purchase order number"
                },
                "incoterms": {
                  "type": "string",
                  "description": "Incoterms"
                },
                "skuDetails": {
                  "type": "array",
                  "description": "SKU details",
                  "items": {
                    "type": "object",
                    "properties": {
                      "msku": {
                        "type": "string",
                        "description": "SKU identifier"
                      },
                      "title": {
                        "type": "string",
                        "description": "SKU title"
                      },
                      "information": {
                        "type": "string",
                        "description": "SKU information"
                      },
                      "expectedQuantity": {
                        "type": "integer",
                        "description": "Expected quantity of SKU"
                      },
                      "uom": {
                        "type": "string",
                        "description": "Unit of measurement"
                      }
                    },
                    "required": ["msku", "title", "expectedQuantity", "uom"]
                  }
                },
                "packageDetails": {
                  "type": "array",
                  "description": "Package details",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Package type"
                      },
                      "msku": {
                        "type": "string",
                        "description": "SKU identifier"
                      },
                      "productCount": {
                        "type": "string",
                        "description": "Product count"
                      },
                      "weight": {
                        "type": "string",
                        "description": "Package weight"
                      },
                      "height": {
                        "type": "string",
                        "description": "Package height"
                      },
                      "breadth": {
                        "type": "string",
                        "description": "Package breadth"
                      },
                      "unitLBH": {
                        "type": "string",
                        "description": "Unit of measurement for length, breadth, and height"
                      },
                      "unitW": {
                        "type": "string",
                        "description": "Unit of measurement for weight"
                      },
                      "length": {
                        "type": "string",
                        "description": "Package length"
                      },
                      "expectedQuantity": {
                        "type": "string",
                        "description": "Expected quantity of the package"
                      }
                    },
                    "required": ["type", "msku", "productCount", "weight", "height", "breadth", "unitLBH", "unitW", "length", "expectedQuantity"]
                  }
                },
                "bookingDate": {
                  "type": "string",
                  "format": "date",
                  "description": "Booking date",
                  "example": "2023-08-09"
                },
                "bookingTime": {
                  "type": "string",
                  "description": "Booking time",
                  "example": "11:26"
                },
                "termsAndCondition": {
                  "type": "string",
                  "description": "Terms and conditions"
                },
                "type": {
                  "type": "integer",
                  "description": "Type (1 for something, 2 for something else)",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inbound job updated successfully."
          },
          "400": {
            "description": "Bad request."
          },
          "404": {
            "description": "Job not found."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/job/ftlVerification": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Perform FTL Verification",
        "description": "Perform FTL (Full Truck Load) verification for a job.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing job ID, verification type, FTL verification details, and createdBy (optional)",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64d32a38f681b6742162eab7"
                },
                "type": {
                  "type": "integer",
                  "description": "Verification type (1 for approval, 2 for rejection)",
                  "example": 1
                },
                "ftlVerification": {
                  "type": "object",
                  "description": "FTL verification details",
                  "properties": {
                    "uploadPhoto": {
                      "type": "string",
                      "description": "URL of the uploaded photo",
                      "example": "https://example.com/photo.jpg"
                    }
                  }
                },
                "createdBy": {
                  "type": "string",
                  "description": "ID of the user who initiated the verification (optional)",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],        
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation Error"
          },
          "404": {
            "description": "Job Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/gateAssignToJob": {
      "post": {
        "tags": ["Job"],
        "summary": "Assign Gate to Job",
        "description": "Assign a specific gate to a job for managing the shipment process.",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing job ID, gate ID, and createdBy (optional)",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64d32a38f681b6742162eab7"
                },
                "gateId": {
                  "type": "string",
                  "description": "ID of the gate",
                  "example": "64b8d49b241b2ec38fbbcb56"
                },
                "createdBy": {
                  "type": "string",
                  "description": "ID of the user who assigned the gate (optional)",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Job or Gate not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },    
    "/job/skuList": {
      "post": {
        "tags": ["Job"],
        "summary": "Get SKU List for Job",
        "description": "Retrieve the list of SKU details for a specific job.",
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing job ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64d32a38f681b6742162eab7"
                }
              },
              "example": {
                "jobId": "64d32a38f681b6742162eab7"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },    
    "/job/statusList": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Retrieve Status Options",
        "description": "Retrieve a list of available status options.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/statusOfGoods": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Retrieve Status of Goods Options",
        "description": "Retrieve a list of available status options for goods.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/bayAssign": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Assign Bay to Job",
        "description": "Assign a bay to a job during the shipment process.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing job and bay assignment data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64d32a38f681b6742162eab7"
                },
                "bayId": {
                  "type": "string",
                  "description": "ID of the bay",
                  "example": "64b8d49b241b2ec38fbbcb56"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Bay or job not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/list": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Get List of Jobs",
        "description": "Get a list of jobs based on filter criteria.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing filter criteria",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "search": {
                  "type": "string",
                  "description": "Search keyword",
                  "example": ""
                },
                "bayName": {
                  "type": "string",
                  "description": "Name of the bay",
                  "example": ""
                },
                "gateName": {
                  "type": "string",
                  "description": "Name of the gate",
                  "example": ""
                },
                "bookingDate": {
                  "type": "string",
                  "description": "Booking date",
                  "example": ""
                },
                "status": {
                  "type": "integer",
                  "description": "Status of the job",
                  "example": 0
                },
                "wareHouseId": {
                  "type": "string",
                  "description": "ID of the warehouse",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                },
                "companyUserId": {
                  "type": "string",
                  "description": "ID of the company user",
                  "example": "64df84c2e9a698a3726e2c34"
                }
              },
              "example": {
                "search": "",
                "bayName": "",
                "gateName": "",
                "bookingDate": "",
                "status": 0,
                "wareHouseId": "64e09db3fe0f02a6b8cffbb9",
                "companyUserId": "64df84c2e9a698a3726e2c34"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid fields in the request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/uploadMultiImages": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Upload Multiple Images",
        "description": "Upload multiple images and associate them with a specific consignment or document type.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "images",
            "in": "formData",
            "description": "Array of image files to upload",
            "required": true,
            "type": "file",
            "format": "binary"
          },
          {
            "name": "consignmentId",
            "in": "formData",
            "description": "ID of the consignment to associate the images with",
            "required": true,
            "type": "string",
            "example": "64d32a38f681b6742162eab7"
          },
          {
            "name": "imageType",
            "in": "formData",
            "description": "Type of image (1 for gs_vehicleImage, 2 for gs_driverLicenseImage, etc.)",
            "required": true,
            "type": "integer",
            "example": 1
          },
          {
          "wareHouseId":{
            "type":"string",
            "example":"64f85cd9828736e666b93146"
          }
        },
        {
          "companyId":{
            "type":"string",
            "example":"64b8d49b241b2ec38fbbcb56"
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Images uploaded and saved successfully"
          },
          "400": {
            "description": "Validation Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/getGRNById": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Get GRN by ID",
        "description": "Get GRN (Goods Receipt Note) details by providing a consignment ID or job ID.",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Consignment ID or job ID to retrieve GRN details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "WMMA0060"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GRN details retrieved successfully"
          },
          "400": {
            "description": "Validation Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/listJobId": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "List Job IDs",
        "description": "List all job IDs available in the system.",
        "responses": {
          "200": {
            "description": "Job IDs listed successfully"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/createInwardAsn": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Create Inward ASN",
        "description": "Create a new Inward ASN (Advance Shipment Notice).",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing Inward ASN data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "description": "ID of the client",
                  "example": "64ce4978c8323e4912d2c319"
                },
                "vehicleDetail": {
                  "type": "object",
                  "description": "Vehicle details",
                  "properties": {
                    "vehicleNo": {
                      "type": "string",
                      "description": "Vehicle number"
                    }
                  }
                },
                "invoiceNo": {
                  "type": "string",
                  "description": "Invoice number",
                  "example": "INV12345"
                },
                "purchaseOrderNo": {
                  "type": "string",
                  "description": "Purchase Order number"
                },
                "incoterms": {
                  "type": "string",
                  "description": "Incoterms"
                },
                "skuDetails": {
                  "type": "array",
                  "description": "Array of SKU details",
                  "items": {
                    "type": "object",
                    "properties": {
                      "msku": {
                        "type": "string",
                        "description": "MSKU of the SKU",
                        "example": "SKU123"
                      },
                      "title": {
                        "type": "string",
                        "description": "Title of the SKU"
                      },
                      "information": {
                        "type": "string",
                        "description": "Information about the SKU"
                      },
                      "units": {
                        "type": "string",
                        "description": "Units"
                      },
                      "uom": {
                        "type": "string",
                        "description": "Unit of Measurement"
                      }
                    }
                  }
                },
                "packageDetails": {
                  "type": "array",
                  "description": "Array of package details",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "ID of the package"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the package"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the package"
                      },
                      "status": {
                        "type": "integer",
                        "description": "Status of the package"
                      },
                      "quantity": {
                        "type": "integer",
                        "description": "Quantity of the package"
                      },
                      "receivedQuantity": {
                        "type": "integer",
                        "description": "Received quantity of the package"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the package"
                      },
                      "defectedQuantity": {
                        "type": "integer",
                        "description": "Defected quantity of the package"
                      },
                      "wareHouseId":{
                        "type":"string",
                        "example":"64f85cd9828736e666b93146"
                      },
                      "companyId":{
                        "type":"string",
                        "example":"64b8d49b241b2ec38fbbcb56"
                      }
                    }
                  }
                },
                "bookingDate": {
                  "type": "string",
                  "description": "Booking date"
                },
                "bookingTime": {
                  "type": "string",
                  "description": "Booking time"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Client not found or validation error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/dashBoard": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Get Dashboard Information",
        "description": "Get information for the dashboard based on the specified type.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing the dashboard type",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "integer",
                  "description": "Type of the dashboard (1 or 2)",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid type value"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/job/bayReassign": {
      "post": {
        "tags": [
          "Job"
        ],
        "summary": "Reassign Bay to Job",
        "description": "Reassign a bay to a job.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing job and bay IDs",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64e39c1e4fd14a53c10a6777"
                },
                "bayId": {
                  "type": "string",
                  "description": "ID of the bay",
                  "example": "64e3957aed57a026a751d409"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid input data. Both jobId and bayId are required."
          },
          "404": {
            "description": "Job not found or Bay not found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bay/create": {
      "post": {
        "tags": [
          "Bay"
        ],
        "summary": "Create Bay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b>Req param's: </b> groupId 1=> InboundBay, 2=> OutboundBay, 3=> temporaryBay ||  status 1=> Free, 2=> Occupied",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Bay 1"
                },
                "groupId": {
                  "type": "number",
                  "example": 1
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bay created successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bay/list": {
      "post": {
        "tags": [
          "Bay"
        ],
        "summary": "Bay List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b> Res param's: </b>Status -1 => Data Not Found || Status 1 => Success",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 1
                },
                "groupId": {
                  "type": "number",
                  "example": 1
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/bay/getById": {
      "post": {
        "tags": [
          "Bay"
        ],
        "summary": "Get Bay by ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b>Req param's: </b> Status -1 => validation error || Status -2 => bay not found || Status 1 => success",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<b> Res param's: </b> Status 1 => success"
          },
          "400": {
            "description": "<b> Res param's: </b> Status -1 => validation error"
          },
          "404": {
            "description": "<b> Res param's: </b> Status -2 => bay not found"
          },
          "500": {
            "description": "<b> Res param's: </b> Status -1 => internal server error"
          },
          "default": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bay/update": {
      "post": {
        "tags": [
          "Bay"
        ],
        "summary": "Update Bay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b> Res param's: </b>Status -1 => validation missing || Status 1 => Updated Successfully",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "name": {
                  "type": "string",
                  "example": "Updated Bay Name"
                },
                "groupId": {
                  "type": "number",
                  "example": 2
                },
                "description": {
                  "type": "string",
                  "example": "Updated Bay Description"
                },
                "status": {
                  "type": "number",
                  "example": 2
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bay updated successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Data not found"
          },
          "default": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bay/delete": {
      "delete": {
        "tags": [
          "Bay"
        ],
        "summary": "Delete Bay",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b>Req param's: </b> _id - The ID of the bay to delete",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bay deleted successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Bay not found"
          },
          "default": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/bay/inboundBayList": {
      "post": {
        "tags": [
          "Bay"
        ],
        "summary": "Get Inbound Bays List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b>Req param's: </b> groupId 1=> InboundBay, 2=> OutboundBay, 3=> temporaryBay ||  status 1=> Free, 2=> Occupied",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "groupId": {
                  "type": "integer",
                  "example": 1
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bay/outboundBayList": {
      "post": {
        "tags": [
          "Bay"
        ],
        "summary": "Get Outbound Bays List",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b>Req param's: </b> groupId 1=> InboundBay, 2=> OutboundBay, 3=> temporaryBay ||  status 1=> Free, 2=> Occupied",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "groupId": {
                  "type": "integer",
                  "example": 2
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bay/inboundBayListByUserId": {
      "post": {
        "tags": [
          "Bay"
        ],
        "summary": "Get Inbound Bays List by User ID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "<b>Req param's: </b> userId - The ID of the user to retrieve inbound bays",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "123456789012345678901234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bin/create": {
      "post": {
        "tags": [
          "Bin"
        ],
        "summary": "Create Bin",
        "description": "Create a new bin.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing bin data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the bin",
                  "example": "bin1"
                },
                "type": {
                  "type": "integer",
                  "description": "Type of the bin",
                  "example": 1
                },
                "size": {
                  "type": "string",
                  "description": "Size of the bin",
                  "example": "23"
                },
                "width": {
                  "type": "string",
                  "description": "Width of the bin",
                  "example": "45"
                },
                "height": {
                  "type": "string",
                  "description": "Height of the bin",
                  "example": "15"
                },
                "available_size": {
                  "type": "string",
                  "description": "Available size of the bin",
                  "example": "14"
                },
                "total_size": {
                  "type": "string",
                  "description": "Total size of the bin",
                  "example": "30"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request. Invalid input data."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bin/list": {
      "post": {
        "tags": [
          "Bin"
        ],
        "summary": "List Bins",
        "description": "Get a list of bins.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request. No bins found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bin/getById": {
      "post": {
        "tags": [
          "Bin"
        ],
        "summary": "Get Bin by ID",
        "description": "Get bin details by its ID.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing bin ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "649304578c524f46dd90f061",
                  "description": "ID of the bin"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request. Bin not found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bin/update": {
      "post": {
        "tags": [
          "Bin"
        ],
        "summary": "Update Bin",
        "description": "Update bin details by its ID.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing bin ID and updated bin details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "649304578c524f46dd90f061",
                  "description": "ID of the bin to update"
                },
                "name": {
                  "type": "string",
                  "example": "bin2",
                  "description": "Updated name of the bin"
                },
                "type": {
                  "type": "integer",
                  "example": 1,
                  "description": "Updated type of the bin"
                },
                "size": {
                  "type": "string",
                  "example": "23",
                  "description": "Updated size of the bin"
                },
                "width": {
                  "type": "string",
                  "example": "45",
                  "description": "Updated width of the bin"
                },
                "height": {
                  "type": "string",
                  "example": "15",
                  "description": "Updated height of the bin"
                },
                "available_size": {
                  "type": "string",
                  "example": "14",
                  "description": "Updated available size of the bin"
                },
                "total_size": {
                  "type": "string",
                  "example": "30",
                  "description": "Updated total size of the bin"
                },

                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request. Bin not found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bin/delete": {
      "delete": {
        "tags": [
          "Bin"
        ],
        "summary": "Delete Bin",
        "description": "Delete a bin by its ID.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing bin ID to delete",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "649304578c524f46dd90f061",
                  "description": "ID of the bin to delete"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request. Bin not found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bin/occupied": {
      "post": {
        "tags": [
          "Bin"
        ],
        "summary": "Set Bins as Occupied",
        "description": "Set selected bins as occupied.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing selected bins",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "selectedBin": {
                  "type": "array",
                  "description": "Array of selected bin IDs",
                  "items": {
                    "type": "string",
                    "example": "64e3957aed57a026a751d409",
                    "description": "ID of the selected bin"
                  },
                  "wareHouseId":{
                    "type":"string",
                    "example":"64f85cd9828736e666b93146"
                  },
                  "companyId":{
                    "type":"string",
                    "example":"64b8d49b241b2ec38fbbcb56"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request. Bin not found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bin/release": {
      "post": {
        "tags": [
          "Bin"
        ],
        "summary": "Release Bins",
        "description": "Release selected bins.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing selected bins",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "selectedBin": {
                  "type": "array",
                  "description": "Array of selected bin IDs",
                  "items": {
                    "type": "string",
                    "example": "64e3957aed57a026a751d409",
                    "description": "ID of the selected bin"
                  },
                  "wareHouseId":{
                    "type":"string",
                    "example":"64f85cd9828736e666b93146"
                  },
                  "companyId":{
                    "type":"string",
                    "example":"64b8d49b241b2ec38fbbcb56"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request. Bin not found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/bin/binListByShelfId": {
      "post": {
        "tags": [
          "Bin"
        ],
        "summary": "List Bins by Shelf ID",
        "description": "List bins by Shelf ID and row.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing Shelf ID and row",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "shelfId": {
                  "type": "string",
                  "description": "ID of the shelf",
                  "example": "64cb7e881a774c1293d531ee"
                },
                "row": {
                  "type": "integer",
                  "description": "Row number",
                  "example": 2
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request. Bin not found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/cart/create": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Create Cart",
        "description": "Create a new cart.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing cart data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "packageInfo": {
                  "type": "array",
                  "description": "Array of package information",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "ID of the package",
                        "example": "64bd327f9b72f0ab9e5acc7d"
                      },
                      "jobId": {
                        "type": "string",
                        "description": "ID of the job",
                        "example": "64bcd730bcbeac315dfdfe62"
                      },
                      "consignmentId": {
                        "type": "string",
                        "description": "Consignment ID",
                        "example": "WMPA0001"
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the package"
                      },
                      "msku": {
                        "type": "string",
                        "description": "MSKU"
                      },
                      "unit": {
                        "type": "string",
                        "description": "Unit"
                      },
                      "weight": {
                        "type": "string",
                        "description": "Weight"
                      },
                      "length": {
                        "type": "string",
                        "description": "Length"
                      },
                      "breadth": {
                        "type": "string",
                        "description": "Breadth"
                      },
                      "dimension": {
                        "type": "string",
                        "description": "Dimension"
                      },
                      "status": {
                        "type": "integer",
                        "description": "Status"
                      },
                      "approvedStatus": {
                        "type": "integer",
                        "description": "Approved Status"
                      },
                      "quantity": {
                        "type": "string",
                        "description": "Quantity"
                      },
                      "expectedQuantity": {
                        "type": "string",
                        "description": "Expected Quantity"
                      },
                      "approvedQuantity": {
                        "type": "string",
                        "description": "Approved Quantity"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type"
                      },
                      "defectedQuantity": {
                        "type": "string",
                        "description": "Defected Quantity"
                      }
                    }
                  }
                },
                "userId": {
                  "type": "string",
                  "description": "ID of the user",
                  "example": "64bcd636bcbeac315dfdfe2a"
                },
                "jobId": {
                  "type": "string",
                  "description": "ID of the job",
                  "example": "64bcd730bcbeac315dfdfe62"
                },
                "consignmentId": {
                  "type": "string",
                  "description": "Consignment ID",
                  "example": "WMPA0001"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Bad Request. Internal server error."
          }
        }
      }
    },
    "/cart/list": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "List Carts by User ID",
        "description": "List carts associated with a specific user.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing user ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "ID of the user",
                  "example": "64cb57e4fac1fc90193944ba"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Bad Request. Internal server error."
          }
        }
      }
    },
    "/cart/getById": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Get Cart by ID",
        "description": "Get a cart by its unique ID.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing cart ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of the cart",
                  "example": "64bd327f9b72f0ab9e5acc7d"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Bad Request. Internal server error."
          }
        }
      }
    },
    "/cart/update": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Cart",
        "description": "Update a cart by its unique ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing updated cart data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "ID of the cart to update",
                  "example": "64bd327f9b72f0ab9e5acc7d"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Bad Request. Internal server error."
          }
        }
      }
    },
    "/cart/delete": {
      "delete": {
        "tags": [
          "Cart"
        ],
        "summary": "Remove Package from Cart",
        "description": "Remove a package from the cart by cart ID and package ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing cart ID, package ID, and user ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "cartId": {
                  "type": "string",
                  "description": "ID of the cart",
                  "example": "64bd327f9b72f0ab9e5acc7d"
                },
                "packageId": {
                  "type": "string",
                  "description": "ID of the package to remove from the cart",
                  "example": "64bd327f9b72f0ab9e5acc7e"
                },
                "userId": {
                  "type": "string",
                  "description": "ID of the user",
                  "example": "64bd327f9b72f0ab9e5acc7f"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request. Cart not found or Package not found in the cart."
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/cart/updateCartAndAddPackage": {
      "post": {
        "tags": [
          "Cart"
        ],
        "summary": "Update Cart and Add Package",
        "description": "Update the user's cart by adding a package from a specified task.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing user ID and task ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "ID of the user",
                  "example": "64cb57e4fac1fc90193944ba"
                },
                "taskId": {
                  "type": "string",
                  "description": "ID of the task",
                  "example": "64e0e60843db5e6da06f03e0"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found. Task not found for the provided taskId"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/client/create": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Create Client",
        "description": "Create a new client with the provided information.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing client information",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Client name",
                  "example": "CndrellaSubramanian"
                },
                "contactPerson": {
                  "type": "string",
                  "description": "Contact person's name",
                  "example": "Cindrella"
                },
                "contactNumber": {
                  "type": "string",
                  "description": "Contact number",
                  "example": "9344623307"
                },
                "address": {
                  "type": "string",
                  "description": "Client's address",
                  "example": "A1 main Street"
                },
                "billingAddress": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Billing address name",
                      "example": "cindu"
                    },
                    "address": {
                      "type": "string",
                      "description": "Billing address",
                      "example": "cbe"
                    }
                  },
                  "description": "Billing address"
                },
                "shippingAddress": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Shipping address name",
                      "example": "cindu"
                    }
                  },
                  "description": "Shipping address"
                },
                "companyWebsite": {
                  "type": "string",
                  "description": "Company website URL",
                  "example": "cindrella@gmail.com"
                },
                "industry": {
                  "type": "string",
                  "description": "Industry",
                  "example": "Coimbatore"
                },
                "paymentTerms": {
                  "type": "object",
                  "properties": {
                    "method": {
                      "type": "string",
                      "description": "Payment method",
                      "example": "card"
                    }
                  },
                  "description": "Payment terms"
                },
                "notes": {
                  "type": "string",
                  "description": "Notes",
                  "example": "Positivity"
                },
                "photoUrl": {
                  "type": "string",
                  "description": "URL of client's photo",
                  "example": ""
                },
                "email": {
                  "type": "string",
                  "description": "Client's email",
                  "example": "cindrella@gmail.com"
                },
                "countryCode": {
                  "type": "string",
                  "description": "Country code",
                  "example": "+91"
                },
                "country": {
                  "type": "string",
                  "description": "Country",
                  "example": "India"
                },
                "state": {
                  "type": "string",
                  "description": "State",
                  "example": "TamilNadu"
                },
                "city": {
                  "type": "string",
                  "description": "City",
                  "example": "Coimbatore"
                },
                "zipCode": {
                  "type": "string",
                  "description": "Zip code",
                  "example": "6124010"
                },
                "about": {
                  "type": "string",
                  "description": "About",
                  "example": "good"
                },
                "contactPersonEmail": {
                  "type": "string",
                  "description": "Contact person's email",
                  "example": "cindu@gmail.com"
                },
                "contactPersonCountryCode": {
                  "type": "string",
                  "description": "Contact person's country code",
                  "example": "ABCD1234"
                },
                "contactPersonPhone": {
                  "type": "string",
                  "description": "Contact person's phone",
                  "example": "8976543421"
                },
                "gender": {
                  "type": "string",
                  "description": "Gender",
                  "example": "Female"
                },
                "skypeId": {
                  "type": "string",
                  "description": "Skype ID",
                  "example": "Cindu-skype"
                },
                "position": {
                  "type": "string",
                  "description": "Position",
                  "example": "CEO"
                },
                "gstNumber": {
                  "type": "string",
                  "description": "GST number",
                  "example": "12345"
                },
                "panNumber": {
                  "type": "string",
                  "description": "PAN number",
                  "example": "Byutm009870"
                },
                "type": {
                  "type": "string",
                  "description": "Client type",
                  "example": "1"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                },
                "documents": {
                  "type": "array",
                  "description": "Array of document filenames",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "1689851210329.jpg",
                    "1689851210295.jpg",
                    "1689851210294.png"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/client/list": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "List Clients",
        "description": "Retrieve a list of clients.",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/client/infoByGST": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Get Client Info by GST",
        "description": "Retrieve client information by GST number.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing GST number",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "gstNo": {
                  "type": "string",
                  "example": "29GGGGG1314R9Z6"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/client/getById": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Get Client by ID",
        "description": "Get a client by providing the client's _id.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing the client _id to fetch",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64c89cf73a8fa4fd23fd7df3"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/client/update": {
      "post": {
        "tags": [
          "Client"
        ],
        "summary": "Update Client",
        "description": "Update client information by providing the client's _id and the fields to update.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing client information to update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64c89cf73a8fa4fd23fd7df3"
                },
                "name": {
                  "type": "string",
                  "example": "Updated Name"
                },
                "contactPerson": {
                  "type": "string",
                  "example": "Updated Contact Person"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/client/delete": {
      "delete": {
        "tags": [
          "Client"
        ],
        "summary": "Delete Client",
        "description": "Delete a client by providing the client's _id.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing the client _id to delete",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64c89cf73a8fa4fd23fd7df3"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/company/create": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create a Company",
        "description": "Create a new company.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Company",
            "in": "body",
            "description": "Company object that needs to be created",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "RAMCO Cements Ltd",
                  "description": "Name of the company"
                },
                "contactNumber": {
                  "type": "string",
                  "example": "9876543012",
                  "description": "Contact number of the company"
                },
                "address": {
                  "type": "string",
                  "example": "No 98, A Auras Corporate Centre, 2nd Floor, Dr Radhakrishnan Salai, Mylapore-600004.",
                  "description": "Address of the company"
                },
                "website": {
                  "type": "string",
                  "example": "www.ramcocementsltd.com",
                  "description": "Website URL of the company"
                },
                "notes": {
                  "type": "string",
                  "example": "Headquarters",
                  "description": "Notes about the company"
                },
                "email": {
                  "type": "string",
                  "example": "ramcocements@mailinator.com",
                  "description": "Email address of the company"
                },
                "country": {
                  "type": "string",
                  "example": "India",
                  "description": "Country where the company is located"
                },
                "state": {
                  "type": "string",
                  "example": "Tamilnadu",
                  "description": "State where the company is located"
                },
                "city": {
                  "type": "string",
                  "example": "Mylapore",
                  "description": "City where the company is located"
                },
                "zipCode": {
                  "type": "integer",
                  "example": 600004,
                  "description": "Zip code of the company's location"
                },
                "skypeId": {
                  "type": "string",
                  "example": "skypeId0876856",
                  "description": "Skype ID of the company"
                },
                "gstNumber": {
                  "type": "string",
                  "example": "HFTY6745rfhgfz",
                  "description": "GST number of the company"
                },
                "status": {
                  "type": "integer",
                  "example": 1,
                  "description": "Status of the company"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/company/list": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "List Companies",
        "description": "List all companies.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/company/getById": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Get Company by ID",
        "description": "Get a company by its unique ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64c89cf73a8fa4fd23fd7df3"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/company/update": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Update Company",
        "description": "Update an existing company.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Company",
            "in": "body",
            "description": "Company object that needs to be updated",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64df682c87b8dae6f4a40db5",
                  "description": "ID of the company to be updated"
                },
                "name": {
                  "type": "string",
                  "example": "Fuzionest",
                  "description": "Name of the company"
                },
                "contactNumber": {
                  "type": "string",
                  "example": "9865430000",
                  "description": "Contact number of the company"
                },
                "address": {
                  "type": "string",
                  "example": "2/102 Kamaraj Nagar, Coimbatore",
                  "description": "Address of the company"
                },
                "website": {
                  "type": "string",
                  "example": "www.fuzionest1.com",
                  "description": "Website URL of the company"
                },
                "notes": {
                  "type": "string",
                  "example": "test note",
                  "description": "Notes about the company"
                },
                "email": {
                  "type": "string",
                  "example": "fuzionest1@mailinator.com",
                  "description": "Email address of the company"
                },
                "country": {
                  "type": "string",
                  "example": "India",
                  "description": "Country where the company is located"
                },
                "state": {
                  "type": "string",
                  "example": "Tamilnadu",
                  "description": "State where the company is located"
                },
                "city": {
                  "type": "string",
                  "example": "Coimbatore",
                  "description": "City where the company is located"
                },
                "zipCode": {
                  "type": "integer",
                  "example": 654314,
                  "description": "Zip code of the company's location"
                },
                "skypeId": {
                  "type": "string",
                  "example": "skypeId0876856",
                  "description": "Skype ID of the company"
                },
                "gstNumber": {
                  "type": "string",
                  "example": "HFTY6745rfhgf",
                  "description": "GST number of the company"
                },
                "status": {
                  "type": "integer",
                  "example": 1,
                  "description": "Status of the company"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/company/delete": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Delete Company",
        "consumes": [
          "application/json"
        ],
        "description": "Delete an existing company by ID.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64c89cf73a8fa4fd23fd7df3"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/departmentType/create": {
      "post": {
        "tags": [
          "DepartmentType"
        ],
        "summary": "Create Department Type",
        "description": "Create a new department type.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Department Type Name",
                  "description": "Name of the department type"
                },
                "description": {
                  "type": "string",
                  "example": "Description of the department type",
                  "description": "Description of the department type"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/departmentType/list": {
      "post": {
        "tags": [
          "DepartmentType"
        ],
        "summary": "List Department Types",
        "description": "Get a list of department types.",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/departmentType/getById": {
      "post": {
        "tags": [
          "DepartmentType"
        ],
        "summary": "Get Department Type by ID",
        "description": "Get a department type by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ID of the department type to retrieve.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64e0e60843db5e6da06f03e0"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Department Type not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/departmentType/update": {
      "post": {
        "tags": [
          "DepartmentType"
        ],
        "summary": "Update Department Type",
        "description": "Update an existing department type by ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing data to update a department type",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64d71643c084e90329dac115",
                  "description": "ID of the department type to update"
                },
                "name": {
                  "type": "string",
                  "example": "Updated Department Type Name",
                  "description": "Updated name of the department type"
                },
                "description": {
                  "type": "string",
                  "example": "Updated Description of the department type",
                  "description": "Updated description of the department type"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/departmentType/delete": {
      "delete": {
        "tags": [
          "DepartmentType"
        ],
        "summary": "Delete Department Type",
        "description": "Delete an existing department type by ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Department type ID to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64c89cf73a8fa4fd23fd7df3"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Department Type not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipment/create": {
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "Create Equipment",
        "description": "Create a new equipment entry.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Equipment data to create.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Crane",
                  "description": "Equipment Name"
                },
                "type": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "64ca4257f8e419ef83474ac4",
                      "description": "Equipment Type ID"
                    },
                    "name": {
                      "type": "string",
                      "example": "Equipment1",
                      "description": "Equipment Type Name"
                    },
                    "description": {
                      "type": "string",
                      "example": "Description",
                      "description": "Equipment Type Description"
                    },
                    "createdAt": {
                      "type": "string",
                      "example": "2023-08-02T11:47:35.676Z",
                      "description": "Equipment Type Created At"
                    },
                    "updatedAt": {
                      "type": "string",
                      "example": "2023-08-02T11:47:35.676Z",
                      "description": "Equipment Type Updated At"
                    },
                    "__v": {
                      "type": "integer",
                      "example": 0,
                      "description": "Equipment Type Version"
                    }
                  },
                  "required": [
                    "_id",
                    "name",
                    "description",
                    "createdAt",
                    "updatedAt",
                    "__v"
                  ]
                },
                "manufacturer": {
                  "type": "string",
                  "example": "",
                  "description": "Manufacturer Name"
                },
                "model": {
                  "type": "string",
                  "example": "123",
                  "description": "Equipment Model"
                },
                "serialNumber": {
                  "type": "string",
                  "example": "324",
                  "description": "Equipment Serial Number"
                },
                "purchaseDate": {
                  "type": "string",
                  "example": "",
                  "description": "Equipment Purchase Date"
                },
                "purchasePrice": {
                  "type": "string",
                  "example": "",
                  "description": "Equipment Purchase Price"
                },
                "condition": {
                  "type": "string",
                  "example": "Good",
                  "description": "Equipment Condition"
                },
                "parkingArea": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "64ca41f8f8e419ef83474aa6",
                      "description": "Parking Area ID"
                    },
                    "name": {
                      "type": "string",
                      "example": "Dock 1",
                      "description": "Parking Area Name"
                    },
                    "groupId": {
                      "type": "integer",
                      "example": 1,
                      "description": "Parking Area Group ID"
                    },
                    "description": {
                      "type": "string",
                      "example": "Description",
                      "description": "Parking Area Description"
                    },
                    "status": {
                      "type": "integer",
                      "example": 2,
                      "description": "Parking Area Status"
                    },
                    "wareHouseId":{
                      "type":"string",
                      "example":"64f85cd9828736e666b93146"
                    },
                    "companyId":{
                      "type":"string",
                      "example":"64b8d49b241b2ec38fbbcb56"
                    }
                  },
                  "required": [
                    "_id",
                    "name",
                    "groupId",
                    "description",
                    "status"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Validation error or equipment type not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipment/list": {
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "List Equipment",
        "description": "List equipment based on filters.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter criteria for listing equipment.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string",
                  "description": "Status filter (e.g., 'assigned', 'unassigned'). Leave empty for all.",
                  "example": "assigned"
                },
                "search": {
                  "type": "string",
                  "description": "Search keyword to filter by equipment name or unique ID.",
                  "example": "ABC123"
                },
                "type": {
                  "type": "string",
                  "description": "Equipment type filter.",
                  "example": "64c89aad3a8fa4fd23fd7d75"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "status",
                "search",
                "type"
              ],
              "example": {
                "search": "",
                "status": "assigned",
                "type": "64c89aad3a8fa4fd23fd7d75"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipment/getById": {
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "Get Equipment by ID",
        "description": "Retrieve equipment details by ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Equipment ID to retrieve.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Equipment ID to retrieve.",
                  "example": "64c89cf73a8fa4fd23fd7df3"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation Error"
          },
          "404": {
            "description": "Equipment Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipment/update": {
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "Update Equipment",
        "description": "Update equipment details by ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Equipment ID and updated equipment details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Equipment ID to update.",
                  "example": "64c89cf73a8fa4fd23fd7df3"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipment/delete": {
      "delete": {
        "tags": [
          "Equipment"
        ],
        "summary": "Delete Equipment",
        "description": "Delete equipment by ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Equipment ID to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Equipment ID to delete.",
                  "example": "64c89cf73a8fa4fd23fd7df3"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Validation Error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipment/responsiblePerson": {
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "Create Responsible Person",
        "description": "Create a new responsible person entry.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing data to create a responsible person.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "employeeList": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64cb7779465240b070e041a8",
                        "description": "User ID"
                      },
                      "type": {
                        "type": "integer",
                        "example": 1,
                        "description": "User Type"
                      },
                      "fullName": {
                        "type": "string",
                        "example": "Cindrella Subramanian",
                        "description": "User Full Name"
                      },
                      "wareHouseId":{
                        "type":"string",
                        "example":"64f85cd9828736e666b93146"
                      },
                      "companyId":{
                        "type":"string",
                        "example":"64b8d49b241b2ec38fbbcb56"
                      }
                    },
                    "required": [
                      "_id",
                      "type",
                      "fullName"
                    ]
                  }
                },
                "departmentList": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64b8bfc6a6e960f64ccc14a0",
                        "description": "Department ID"
                      },
                      "description": {
                        "type": "string",
                        "example": "Description",
                        "description": "Department Description"
                      },
                      "type": {
                        "type": "integer",
                        "example": 2,
                        "description": "Department Type"
                      },
                      "fullName": {
                        "type": "string",
                        "example": "HR Department",
                        "description": "Department Full Name"
                      }
                    },
                    "required": [
                      "_id",
                      "description",
                      "type",
                      "fullName"
                    ]
                  }
                }
              },
              "required": [
                "employeeList",
                "departmentList"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request - Validation error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipment/selectEquipment": {
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "Select Equipment",
        "description": "Select and assign equipment to a user for a task.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Request body containing data to select equipment.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "cartId": {
                  "type": "string",
                  "example": "64d71643c084e90329dac115",
                  "description": "Cart ID"
                },
                "userId": {
                  "type": "string",
                  "example": "64cb57e4fac1fc90193944ba",
                  "description": "User ID"
                },
                "equipmentId": {
                  "type": "string",
                  "example": "64da11616ed4ef771fc258e0",
                  "description": "Equipment ID"
                },
                "taskId": {
                  "type": "string",
                  "example": "64e0a9ab3c48e8195c9404f9",
                  "description": "Task ID"
                }
              },
              "required": [
                "cartId",
                "userId",
                "equipmentId",
                "taskId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success - Equipment assigned successfully."
          },
          "400": {
            "description": "Bad Request - Invalid input data."
          },
          "404": {
            "description": "Not Found - Equipment not found or user not found."
          },
          "500": {
            "description": "Internal Server Error."
          }
        }
      }
    },
    "/equipment/locationEquipment": {
      "post": {
        "tags": [
          "Equipment"
        ],
        "summary": "Update Equipment Location",
        "description": "Update the location information of equipment.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "equipmentId",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "equipmentId": {
                  "type": "string",
                  "example": "64da10bd6ed4ef771fc258cd",
                  "description": "ID of the equipment."
                },
                "locationId": {
                  "type": "string",
                  "example": "64d08674121a2253e923bb37",
                  "description": "ID of the location."
                }
              },
              "required": [
                "equipmentId",
                "locationId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipmentType/create": {
      "post": {
        "tags": [
          "EquipmentType"
        ],
        "summary": "Create Equipment Type",
        "description": "Create a new equipment type.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Test1",
                  "description": "Equipment Type Name"
                },
                "description": {
                  "type": "string",
                  "example": "test12",
                  "description": "Equipment Type Description"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "name",
                "description"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipmentType/list": {
      "post": {
        "tags": [
          "EquipmentType"
        ],
        "summary": "List Equipment Types",
        "description": "List all equipment types.",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipmentType/getById": {
      "post": {
        "tags": [
          "EquipmentType"
        ],
        "summary": "Get Equipment Type by ID",
        "description": "Get an equipment type by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Equipment Type ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "649acced751afc9e350828b6",
                  "description": "Equipment Type ID"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipmentType/update": {
      "post": {
        "tags": [
          "EquipmentType"
        ],
        "summary": "Update Equipment Type",
        "description": "Update an existing equipment type.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Updated Equipment Type Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "649acced751afc9e350828b6",
                  "description": "Equipment Type ID"
                },
                "name": {
                  "type": "string",
                  "example": "Eq1",
                  "description": "Updated Equipment Type Name"
                }
              },
              "required": [
                "_id",
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/equipmentType/delete": {
      "delete": {
        "tags": [
          "EquipmentType"
        ],
        "summary": "Delete Equipment Type",
        "description": "Delete an existing equipment type.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Equipment Type ID to Delete",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "equipmentTypeId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cfffcc",
                  "description": "Equipment Type ID"
                }
              },
              "required": [
                "equipmentTypeId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/gate/create": {
      "post": {
        "tags": [
          "Gate"
        ],
        "summary": "Create Gate",
        "description": "Create a new gate.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Gate Data",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Gate 5",
                  "description": "Gate Name"
                },
                "description": {
                  "type": "string",
                  "example": "gate",
                  "description": "Gate Description"
                },
                "type": {
                  "type": "integer",
                  "example": 1,
                  "description": "Gate Type"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "name",
                "description",
                "type"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/gate/list": {
      "post": {
        "tags": [
          "Gate"
        ],
        "summary": "List Gates",
        "description": "List all gates.",
        "consumes": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/gate/getById": {
      "post": {
        "tags": [
          "Gate"
        ],
        "summary": "Get Gate by ID",
        "description": "Get a gate by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ID of the gate to retrieve.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "649304578c524f46dd90f061"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/gate/update": {
      "post": {
        "tags": [
          "Gate"
        ],
        "summary": "Update Gate",
        "description": "Update an existing gate by ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Gate object to be updated.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64b7e05be88fddfddefb08cd",
                  "description": "Gate ID"
                },
                "name": {
                  "type": "string",
                  "example": "gate1",
                  "description": "Gate Name"
                },
                "type": {
                  "type": "integer",
                  "example": 2,
                  "description": "Gate Type"
                },
                "status": {
                  "type": "integer",
                  "example": 1,
                  "description": "Gate Status"
                }
              },
              "required": [
                "_id",
                "name",
                "type",
                "status"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/gate/delete": {
      "delete": {
        "tags": [
          "Gate"
        ],
        "summary": "Delete Gate",
        "description": "Delete a gate by ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Gate ID to be deleted.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbca",
                  "description": "ID of the gate to be deleted."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventory/create": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Create Inventory",
        "description": "Create a new inventory item.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Inventory object to be created.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "example": "64b8bf41922019fd63a8f8b7",
                  "description": "Job ID"
                },
                "levelId": {
                  "type": "string",
                  "example": "64ad0b5d9c8801b629b89ccf",
                  "description": "Level ID"
                },
                "msku": {
                  "type": "string",
                  "example": "AirDopes",
                  "description": "Product MSKU"
                },
                "title": {
                  "type": "string",
                  "example": "Product A",
                  "description": "Product Title"
                },
                "units": {
                  "type": "integer",
                  "example": 10,
                  "description": "Number of Units"
                },
                "location": {
                  "type": "string",
                  "example": "Z2A2R2L2",
                  "description": "Location"
                },
                "expectedQuantity": {
                  "type": "integer",
                  "example": 20,
                  "description": "Expected Quantity"
                },
                "receivedQuantity": {
                  "type": "integer",
                  "example": 15,
                  "description": "Received Quantity"
                },
                "type": {
                  "type": "integer",
                  "example": 1,
                  "description": "Type"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "jobId",
                "levelId",
                "msku",
                "title",
                "units",
                "location",
                "expectedQuantity",
                "receivedQuantity",
                "type"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventory/list": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "List Inventory",
        "description": "List inventory items based on filters.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Filter criteria for listing inventory items.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "msku": {
                  "type": "string",
                  "example": "Mobile",
                  "description": "Product MSKU"
                },
                "type": {
                  "type": "integer",
                  "example": 2,
                  "description": "Type"
                },
                "location": {
                  "type": "string",
                  "example": "Z10A10R10L10",
                  "description": "Location"
                },
                "jobId": {
                  "type": "string",
                  "example": "64b8bf41922019fd63a8f8b7",
                  "description": "Job ID"
                },
                "page": {
                  "type": "integer",
                  "example": 1,
                  "description": "Page Number"
                },
                "limit": {
                  "type": "integer",
                  "example": 10,
                  "description": "Limit per Page"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "msku",
                "type",
                "location",
                "jobId",
                "page",
                "limit"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventory/getById": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get Inventory by ID",
        "description": "Get an inventory item by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "ID of the inventory item to retrieve.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "123456789012345678901234"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventory/update": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Update Inventory",
        "description": "Update an inventory item by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Inventory item data to update.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cfffdd",
                  "description": "Inventory Item ID"
                },
                "msku": {
                  "type": "string",
                  "example": "Mobile",
                  "description": "Product MSKU"
                },
                "type": {
                  "type": "integer",
                  "example": 2,
                  "description": "Type"
                },
                "location": {
                  "type": "string",
                  "example": "Z10A10R10L10",
                  "description": "Location"
                },
                "quantity": {
                  "type": "integer",
                  "example": 20,
                  "description": "Quantity"
                },
                "status": {
                  "type": "string",
                  "example": "Active",
                  "description": "Status"
                }
              },
              "required": [
                "id",
                "msku",
                "type",
                "location",
                "quantity",
                "status"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/inventory/delete": {
      "delete": {
        "tags": [
          "Inventory"
        ],
        "summary": "Delete Inventory",
        "description": "Delete an inventory item by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Inventory item ID to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cfffdd",
                  "description": "Inventory Item ID"
                }
              },
              "required": [
                "id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lane/create": {
      "post": {
        "tags": [
          "Lane"
        ],
        "summary": "Create Lane",
        "description": "Create a new Lane.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lane object to create.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "property1": {
                  "type": "string",
                  "example": "ExampleValue1",
                  "description": "Description for Property1"
                },
                "property2": {
                  "type": "string",
                  "example": "ExampleValue2",
                  "description": "Description for Property2"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "property1",
                "property2"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lane/list": {
      "post": {
        "tags": [
          "Lane"
        ],
        "summary": "Get Lane by ID",
        "description": "Get a Lane by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lane ID to retrieve.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "lane_id"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lane/getById": {
      "post": {
        "tags": [
          "Lane"
        ],
        "summary": "Get Lane by ID",
        "description": "Get a Lane by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lane ID to retrieve.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "lane_id"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lane/update": {
      "post": {
        "tags": [
          "Lane"
        ],
        "summary": "Update Lane",
        "description": "Update a Lane by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lane data to update.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "lane_id"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/lane/delete": {
      "delete": {
        "tags": [
          "Lane"
        ],
        "summary": "Delete Lane",
        "description": "Delete a Lane by its ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Lane ID to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "example": "lane_id"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/location/create": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Create Location",
        "description": "Create a new Location with a QR code.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Location data including name, description, and other properties.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Location Name"
                },
                "description": {
                  "type": "string",
                  "example": "Location Description"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/location/list": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "List Locations",
        "description": "List all locations with additional group information.",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/location/getById": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Get Location by ID",
        "description": "Retrieve a location by its unique ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Location ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "location_id"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/location/update": {
      "post": {
        "tags": [
          "Location"
        ],
        "summary": "Update Location",
        "description": "Update an existing location by its unique ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Location object to update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Location name",
                  "example": "Example Location Name"
                },
                "description": {
                  "type": "string",
                  "description": "Location description",
                  "example": "Example Location Description"
                }
              },
              "required": [
                "name"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/location/delete": {
      "delete": {
        "tags": [
          "Location"
        ],
        "summary": "Delete Location",
        "description": "Delete an existing location by its unique ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Location ID to delete",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "location_id"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/create": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create products from an Excel file or JSON data",
        "description": "Create products from an Excel file (xlsx) or JSON data.",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "excelLAS",
            "in": "formData",
            "type": "file",
            "description": "Excel file (xlsx) containing product data"
          },
          {
            "name": "skuDetails",
            "in": "formData",
            "type": "string",
            "description": "JSON string containing an array of product details (if not using a file)",
            "required": false
          },
          {
            "name": "wareHouseId",
            "in": "formData",
            "type": "string",
            "description": "ID of the warehouse where products will be stored"
          },
          {
            "name": "companyUserId",
            "in": "formData",
            "type": "string",
            "description": "ID of the company user creating the products"
          },
          {
          "wareHouseId":{
            "type":"string",
            "example":"64f85cd9828736e666b93146"
          }
        },
        {
          "companyId":{
            "type":"string",
            "example":"64b8d49b241b2ec38fbbcb56"
          }
        }
        ],
        "responses": {
          "200": {
            "description": "Products created successfully or existing products reported"
          },
          "400": {
            "description": "Validation error or missing data"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/list": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "List products based on filter criteria",
        "description": "Retrieve a list of products based on filter criteria.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "page": {
                  "type": "integer",
                  "example": 1,
                  "description": "Page number for pagination (optional)."
                },
                "limit": {
                  "type": "integer",
                  "example": 10,
                  "description": "Number of items per page (optional)."
                },
                "status": {
                  "type": "integer",
                  "example": 1,
                  "description": "Filter by product status (optional)."
                },
                "msku": {
                  "type": "string",
                  "example": "",
                  "description": "Filter by product MSKU (optional)."
                },
                "title": {
                  "type": "string",
                  "example": "",
                  "description": "Filter by product title (optional)."
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "",
                  "description": "Filter by warehouse ID (optional)."
                },
                "companyUserId": {
                  "type": "string",
                  "example": "",
                  "description": "Filter by company user ID (optional)."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Products retrieved successfully"
          },
          "400": {
            "description": "Validation error or missing data"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/allList": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "List All Products",
        "description": "List all products.",
        "consumes": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/getById": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Get a product by ID",
        "description": "Retrieve a product by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Product ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product retrieved successfully"
          },
          "400": {
            "description": "Validation error or missing product ID"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/update": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Update a product by ID",
        "description": "Update a product's information by its ID. If the provided MSKU matches the existing MSKU, only the product data is updated. If the MSKU is different, both the MSKU and product data are updated.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "Product ID",
                    "example": "64e09db3fe0f02a6b8cfffcc"
                  },
                  "msku": {
                    "type": "string",
                    "description": "New MSKU value",
                    "example": "MSK12345"
                  }
                },
                "required": [
                  "_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully"
          },
          "400": {
            "description": "Validation error or missing product ID"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/delete": {
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a product by ID",
        "description": "Delete a product by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Product ID to delete",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully"
          },
          "400": {
            "description": "Validation error or missing product ID"
          },
          "404": {
            "description": "Product not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/statusUpdate": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Update status of multiple products by IDs",
        "description": "Update the status of multiple products by their IDs.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": "64e09db3fe0f02a6b8cfffcc"
                  },
                  "description": "An array of product IDs to update status"
                },
                "status": {
                  "type": "integer",
                  "example": 1,
                  "description": "The new status to set for the products"
                }
              },
              "required": [
                "id",
                "status"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status updated successfully"
          },
          "400": {
            "description": "Validation error or missing required fields"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/packageUpdate": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Update Package Details",
        "description": "Update the package details of a product by its ID and package details ID.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Product ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "packageDetails": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Package Details ID",
                      "example": "64e09db3fe0f02a6b8cfffdd"
                    },
                    "property_name": {
                      "type": "string",
                      "description": "Property Description",
                      "example": "Some Property Value"
                    }
                  },
                  "required": [
                    "_id"
                  ]
                }
              },
              "required": [
                "_id",
                "packageDetails"
              ]
            },
            "example": {
              "_id": "64e09db3fe0f02a6b8cfffcc",
              "packageDetails": {
                "_id": "64e09db3fe0f02a6b8cfffdd",
                "property_name": "Updated Property Value"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/packageDelete": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Delete a package detail from a product",
        "description": "Delete a package detail from a product by specifying the product ID and package detail ID.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Product ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "packageDetailId": {
                  "type": "string",
                  "description": "Package Detail ID",
                  "example": "64e09db3fe0f02a6b8cfffdd"
                }
              },
              "required": [
                "_id",
                "packageDetailId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package detail deleted successfully"
          },
          "400": {
            "description": "Bad request or validation error"
          },
          "404": {
            "description": "Product not found or package detail not deleted"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/searchProducts": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Search Products",
        "description": "Search for products based on a query.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "q": {
                  "type": "string",
                  "description": "Search query",
                  "example": "Lap"
                }
              },
              "required": [
                "q"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/productLocation": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Retrieve Product Location",
        "description": "Retrieve product location information based on an MSKU query.",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "msku": {
                  "type": "string",
                  "description": "MSKU query",
                  "example": "Laptop"
                }
              },
              "required": [
                "msku"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/product/createProduct": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create a new product",
        "description": "Create a new product with the provided details.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "msku": {
                  "type": "string",
                  "description": "Unique identifier for the product",
                  "example": "MSKU12345"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "msku"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product created successfully"
          },
          "400": {
            "description": "Validation error or MSKU already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rack/create": {
      "post": {
        "tags": [
          "Rack"
        ],
        "summary": "Create racks",
        "description": "Create racks along with shelves and bins.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "rackGroupId": {
                  "type": "string",
                  "description": "ID of the rack group",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "quantity": {
                  "type": "integer",
                  "description": "Number of racks to create",
                  "example": 5
                },
                "zoneId": {
                  "type": "string",
                  "description": "ID of the zone",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "zoneName": {
                  "type": "string",
                  "description": "Name of the zone",
                  "example": "ZoneName"
                },
                "rackGroupName": {
                  "type": "string",
                  "description": "Name of the rack group",
                  "example": "RackGroupName"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the rack",
                  "example": "Type"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "rackGroupId",
                "quantity",
                "zoneId",
                "zoneName",
                "rackGroupName",
                "type"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Racks created successfully"
          },
          "400": {
            "description": "Validation error or missing required data"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rack/getAllRacks": {
      "post": {
        "tags": [
          "Rack"
        ],
        "summary": "Get All Racks",
        "description": "Retrieve a list of all racks.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rack/getRackById": {
      "post": {
        "tags": [
          "Rack"
        ],
        "summary": "Get Rack by ID",
        "description": "Retrieve a rack by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Rack ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rack/updateRack": {
      "post": {
        "tags": [
          "Rack"
        ],
        "summary": "Update a rack by ID",
        "description": "Update a rack's information by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Rack ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rack updated successfully"
          },
          "400": {
            "description": "Validation error or missing rack ID"
          },
          "404": {
            "description": "Rack not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rack/deleteRack": {
      "delete": {
        "tags": [
          "Rack"
        ],
        "summary": "Delete a rack by ID",
        "description": "Delete a rack by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Rack ID to delete",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rack deleted successfully"
          },
          "400": {
            "description": "Validation error or missing rack ID"
          },
          "404": {
            "description": "Rack not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rack/listByZoneId": {
      "post": {
        "tags": [
          "Rack"
        ],
        "summary": "List racks by Zone ID",
        "description": "Retrieve a list of racks by Zone ID and provide shelf information.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "zoneId": {
                  "type": "string",
                  "description": "Zone ID to retrieve racks",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "zoneId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Racks retrieved successfully"
          },
          "404": {
            "description": "No racks found for the provided Zone ID"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rackGroup/create": {
      "post": {
        "tags": [
          "RackGroup"
        ],
        "summary": "Create a new rack group",
        "description": "Create a new rack group with the provided data.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the Rack Group",
                  "example": "Rack Group A"
                },
                "description": {
                  "type": "string",
                  "description": "Description of the Rack Group",
                  "example": "This is a description of Rack Group A."
                },
                "location": {
                  "type": "string",
                  "description": "Location of the Rack Group",
                  "example": "Building A, Floor 1"
                },
                "capacity": {
                  "type": "integer",
                  "description": "Capacity of the Rack Group",
                  "example": 50
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }
              },
              "required": [
                "name",
                "location",
                "capacity"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rack group created successfully"
          },
          "400": {
            "description": "Validation error or missing data in the request body"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rackGroup/list": {
      "post": {
        "tags": [
          "RackGroup"
        ],
        "summary": "List Rack Groups",
        "description": "Get a list of all Rack Groups.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rackGroup/getById": {
      "post": {
        "tags": [
          "RackGroup"
        ],
        "summary": "Get a rack group by ID",
        "description": "Retrieve a rack group by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Rack Group ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rack Group retrieved successfully"
          },
          "400": {
            "description": "Validation error or missing Rack Group ID"
          },
          "404": {
            "description": "Rack Group not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rackGroup/update": {
      "post": {
        "tags": [
          "RackGroup"
        ],
        "summary": "Update a rack group by ID",
        "description": "Update a rack group's information by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Rack Group ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Rack Group updated successfully"
          },
          "400": {
            "description": "Validation error or missing Rack Group ID"
          },
          "404": {
            "description": "Rack Group not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/rackGroup/delete": {
      "delete": {
        "tags": [
          "RackGroup"
        ],
        "summary": "Delete Rack Group",
        "description": "Delete an existing Rack Group by ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "The ID of the rack group to delete.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/uom/create": {
      "post": {
        "tags": [
          "UOM"
        ],
        "summary": "Create UOM",
        "description": "Create a new UOM.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "required": true,
            "schema": {
              "example": {
                "length": "cm",
                "mass": "gm",
                "volume": "m³",
                "time": "sec",
                "temperature": "°C",
                "area": "a2"
              },
              "wareHouseId":{
                "type":"string",
                "example":"64f85cd9828736e666b93146"
              },
              "companyId":{
                "type":"string",
                "example":"64b8d49b241b2ec38fbbcb56"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/uom/getById": {
      "post": {
        "tags": [
          "UOM"
        ],
        "summary": "Get UOM by ID",
        "description": "Retrieve a UOM by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "UOM ID",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5fdefa5a3d1d9425b3af39a1",
                  "description": "ID of the UOM to retrieve."
                },
                "wareHouseId":{
                  "type":"string",
                  "example":"64f85cd9828736e666b93146"
                },
                "companyId":{
                  "type":"string",
                  "example":"64b8d49b241b2ec38fbbcb56"
                }  
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/uom/update": {
      "post": {
        "tags": [
          "UOM"
        ],
        "summary": "Update UOM",
        "description": "Update an existing UOM.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "UOM data to be updated",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5fdefa5a3d1d9425b3af39a1",
                  "description": "ID of the UOM to update."
                },
                "name": {
                  "type": "string",
                  "example": "Updated UOM Name"
                },
                "abbreviation": {
                  "type": "string",
                  "example": "UOM"
                },
                "description": {
                  "type": "string",
                  "example": "Updated UOM Description"
                },
                "conversionFactor": {
                  "type": "number",
                  "example": 1.5
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/uom/delete": {
      "delete": {
        "tags": [
          "UOM"
        ],
        "summary": "Delete UOM",
        "description": "Delete an existing UOM.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "UOM data to be deleted",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5fdefa5a3d1d9425b3af39a1",
                  "description": "ID of the UOM to delete."
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/addNewUser": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Add New User",
        "description": "Add a new user to the system.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "User data to be added",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "example": "Kylan"
                },
                "lastName": {
                  "type": "string",
                  "example": "Ochoa"
                },
                "fullName": {
                  "type": "string",
                  "example": "Kylan Ochoa"
                },
                "dateOfBirth": {
                  "type": "string",
                  "example": "1986-05-02"
                },
                "gender": {
                  "type": "string",
                  "example": "Male"
                },
                "contactNumber": {
                  "type": "string",
                  "example": "3245443354"
                },
                "address": {
                  "type": "string",
                  "example": "Commodi voluptatem"
                },
                "department": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "64d365e90bdf3c9a81ce26f7"
                    },
                    "name": {
                      "type": "string",
                      "example": "QA"
                    }
                  }
                },
                "startDate": {
                  "type": "string",
                  "example": "2023-08-19"
                },
                "emergencyContact": {
                  "type": "string",
                  "example": "987654324"
                },
                "skills": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "qualification": {
                  "type": "string",
                  "example": "BE"
                },
                "notes": {
                  "type": "string",
                  "example": "test"
                },
                "emailAddress": {
                  "type": "string",
                  "example": "tatasteel@gmail.com"
                },
                "role": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "64b8bfc6a6e960f64ccc14a0"
                    },
                    "name": {
                      "type": "string",
                      "example": "Manager"
                    },
                    "type": {
                      "type": "integer",
                      "example": 1
                    }
                  }
                },
                "equipmentType": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64ca4257f8e419ef83474ac4"
                      },
                      "name": {
                        "type": "string",
                        "example": "Equipment"
                      }
                    }
                  }
                },
                "bayInfo": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64cca67a3563a925f0430928"
                      },
                      "name": {
                        "type": "string",
                        "example": "In-dock3"
                      },
                      "groupId": {
                        "type": "integer",
                        "example": 1
                      },
                      "description": {
                        "type": "string",
                        "example": ""
                      },
                      "status": {
                        "type": "integer",
                        "example": 2
                      },
                      "createdAt": {
                        "type": "string",
                        "example": "2023-08-04T07:19:22.190Z"
                      },
                      "updatedAt": {
                        "type": "string",
                        "example": "2023-08-04T07:19:22.190Z"
                      }
                    }
                  }
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              },
              "required": [
                "firstName",
                "lastName",
                "emailAddress"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/listUser": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List users based on filter criteria.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Filter criteria for listing users",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "search": {
                  "type": "string",
                  "example": ""
                },
                "status": {
                  "type": "string",
                  "example": ""
                },
                "department": {
                  "type": "string",
                  "example": ""
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/getUserDetails": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get User Details",
        "description": "Get details of a user by ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "User ID to get details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User Login",
        "description": "Authenticate a user and generate access tokens.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "User login credentials",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "emailAddress": {
                  "type": "string",
                  "example": "cindrella@gmail.com",
                  "description": "User's email address."
                },
                "password": {
                  "type": "string",
                  "example": "password123",
                  "description": "User's password."
                },
                "deviceToken": {
                  "type": "string",
                  "example": "deviceToken123",
                  "description": "User's device token."
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              },
              "required": [
                "emailAddress",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/loginWeb": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "User Login (Web)",
        "description": "Authenticate a user for web access and generate access tokens.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "User login credentials",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "emailAddress": {
                  "type": "string",
                  "example": "user@example.com",
                  "description": "User's email address."
                },
                "password": {
                  "type": "string",
                  "example": "password123",
                  "description": "User's password."
                },
                "type": {
                  "type": "integer",
                  "example": 1,
                  "description": "User type (1 for inboundflow, 2 for gatesecurity flow)."
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              },
              "required": [
                "emailAddress",
                "password",
                "type"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/skilsetWiseListEquipment": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "List Equipment by Skill Set",
        "description": "Retrieve a list of equipment based on the user's skill set.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "User ID to fetch skill set and equipment list",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34",
                  "description": "User's ID to fetch skill set and equipment list."
                }
              },
              "required": [
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/palletTypeList": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "List Users by Pallet Type",
        "description": "Retrieve a list of users based on their pallet type skills.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Pallet Type to filter users",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "palletType": {
                  "type": "integer",
                  "example": 1,
                  "description": "Pallet Type to filter users by."
                }
              },
              "required": [
                "palletType"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/userByRole": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "List Users by Role",
        "description": "Retrieve a list of users based on their role.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Role ID to filter users",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "example": "64b8bfc6a6e960f64ccc14a0",
                  "description": "Role ID to filter users by."
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              },
              "required": [
                "role"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/forgotPassword": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reset Password",
        "description": "Reset the password for a user by email address.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "User email address for password reset",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "emailAddress": {
                  "type": "string",
                  "example": "cindrella@gmail.com",
                  "description": "Email address of the user for password reset."
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              },
              "required": [
                "emailAddress"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/update": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update User",
        "description": "Update an existing user's information, including gate information.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "User data to be updated",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5fdefa5a3d1d9425b3af39a1",
                  "description": "ID of the user to update."
                },
                "gateId": {
                  "type": "string",
                  "description": "ID of the gate to associate with the user."
                },
                "gateInfo": {
                  "type": "object",
                  "description": "Gate information associated with the user."
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "user/delete": {
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "description": "Delete an existing user by their ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "User data to be deleted",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "5fdefa5a3d1d9425b3af39a1",
                  "description": "ID of the user to delete."
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/userGetCore": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get Core User Data",
        "description": "Fetch core data for user-related information.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/equipmentAccessUser": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get Equipment Access Users",
        "description": "Fetch users with equipment access.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/equipmentlistByUserId": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get Equipment List by User ID",
        "description": "Fetch the list of equipment by user ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "body",
            "description": "User ID to retrieve equipment list",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34",
                  "description": "User ID to fetch equipment list"
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              },
              "required": [
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/user/pickerUserList": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Get Picker User List",
        "description": "Fetch the list of picker users with status 0 and role types 6, 7, or 8.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {},
              "example": {}
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ware/create": {
      "post": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Create Warehouse and Manager User",
        "description": "Create a new warehouse and a warehouse manager user.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                },
                "name": {
                  "type": "string",
                  "example": "Warehouse Name"
                },
                "email": {
                  "type": "string",
                  "example": "warehouse@example.com"
                },
                "companyInfo": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "64e39433e9a698a372731bc9"
                    }
                  }
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64df84c2e9a698a3726e2c34"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ware/list": {
      "post": {
        "tags": [
          "Warehouse"
        ],
        "summary": "List Warehouses",
        "description": "List warehouses based on search criteria.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "search": {
                  "type": "string",
                  "example": "Warehouse Name"
                },
                "companyId": {
                  "type": "string",
                  "example": "64e39433e9a698a372731bc9"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ware/getById": {
      "post": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Get Warehouse by ID",
        "description": "Get a warehouse by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              },
              "example": {
                "_id": "64e09db3fe0f02a6b8cffbb9"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ware/update": {
      "post": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Update Warehouse",
        "description": "Update a warehouse's information.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                },
                "name": {
                  "type": "string",
                  "example": "Updated Warehouse Name"
                },
                "companyInfo": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "64e39433e9a698a372731bc9"
                    },
                    "name": {
                      "type": "string",
                      "example": "Updated Company Name"
                    },
                    "contactNumber": {
                      "type": "string",
                      "example": "1234567890"
                    },
                    "email": {
                      "type": "string",
                      "example": "company@example.com"
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/ware/delete": {
      "delete": {
        "tags": [
          "Warehouse"
        ],
        "summary": "Delete Warehouse",
        "description": "Delete a warehouse.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/create": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create Task",
        "description": "Create a new task.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "integer",
                  "example": 1
                },
                "note": {
                  "type": "string",
                  "example": "Task note"
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                },
                "jobId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbc"
                },
                "packageDetails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbba"
                      }
                    }
                  }
                },
                "equipmentId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbd"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbe"
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbf"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/relocationCreate": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create Relocation Task",
        "description": "Create a new relocation task.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                },
                "jobId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbc"
                },
                "packageDetails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbba"
                      }
                    }
                  }
                },
                "locationId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbe"
                },
                "equipmentId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbd"
                },
                "note": {
                  "type": "string",
                  "example": "Task note"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbca"
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbcb"
                },
                "createdBy": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbcc"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/taskListByUser": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "List Subtasks by User",
        "description": "List subtasks for a user based on user ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbb9"
                }
              },
              "required": [
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/listTaskFilter": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "List Tasks with Filters",
        "description": "List tasks with optional filters.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "search": {
                  "type": "string",
                  "example": "keyword"
                },
                "status": {
                  "type": "string",
                  "example": "1"
                },
                "type": {
                  "type": "string",
                  "example": "1"
                },
                "equipmentName": {
                  "type": "string",
                  "example": "Equipment Name"
                },
                "userName": {
                  "type": "string",
                  "example": "User Name"
                },
                "date": {
                  "type": "string",
                  "example": "2023-09-01"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/getById": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Get Task by ID",
        "description": "Get a task by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbba"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/addSkuToCart": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Add SKU to Cart",
        "description": "Add an SKU to the user's cart.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbba"
                },
                "skuDetails": {
                  "type": "object"
                }
              },
              "required": [
                "userId",
                "skuDetails"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/completePickup": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Complete Pickup",
        "description": "Complete the pickup process for an SKU and update the package details.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbba"
                },
                "skuID": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbcc"
                },
                "locationInfo": {
                  "type": "object"
                }
              },
              "required": [
                "userId",
                "skuID",
                "locationInfo"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/taskListByDate": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Get Task List by Date",
        "description": "Get a list of tasks for a specific date and user.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "date": {
                  "type": "string",
                  "format": "date",
                  "example": "2023-09-02"
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbba"
                },
                "search": {
                  "type": "string",
                  "example": "consignment123"
                },
                "status": {
                  "type": "string",
                  "example": "1"
                }
              },
              "required": [
                "date",
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/packageList": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Get Package List for a Task",
        "description": "Get a list of packages associated with a task.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbba"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/completedTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Complete Task",
        "description": "Mark a task as completed and update related information.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbba"
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                }
              },
              "required": [
                "taskId",
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/markCompleteTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Mark Task as Completed",
        "description": "Mark a task as completed and update related information.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbba"
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                }
              },
              "required": [
                "taskId",
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/markAsComplete": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Mark Task as Complete",
        "description": "Mark a task as complete and update related collections.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbba"
                },
                "taskId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                }
              },
              "required": [
                "jobId",
                "taskId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task marked as complete"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/taskComplete": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Complete Task",
        "description": "Complete a task and update related collections.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "packageId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbba"
                },
                "taskId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                },
                "type": {
                  "type": "integer",
                  "example": 1
                },
                "approvedProductCount": {
                  "type": "integer",
                  "example": 50
                },
                "rejectA": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "example": 5
                    },
                    "image": {
                      "type": "string",
                      "example": "image-url-for-rejectA"
                    }
                  }
                },
                "rejectB": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "example": 3
                    },
                    "image": {
                      "type": "string",
                      "example": "image-url-for-rejectB"
                    }
                  }
                },
                "rejectC": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer",
                      "example": 2
                    },
                    "image": {
                      "type": "string",
                      "example": "image-url-for-rejectC"
                    }
                  }
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbc"
                },
                "locationId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbd"
                }
              },
              "required": [
                "packageId",
                "taskId",
                "type",
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task completed successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/taskCompleteAllPackage": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Complete All Packages in a Task",
        "description": "Complete all packages in a task and update related collections.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                },
                "type": {
                  "type": "integer",
                  "example": 1
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbc"
                }
              },
              "required": [
                "taskId",
                "type",
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All packages in the task completed successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/reassignTaskToUser": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Reassign Task to User",
        "description": "Reassign a task to a different user.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                },
                "taskId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbc"
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbd"
                }
              },
              "required": [
                "jobId",
                "taskId",
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task reassigned successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/unloadTaskComplete": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Complete Unload Task",
        "description": "Mark an unload task as completed.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                },
                "id1": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbc"
                },
                "id2": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbd"
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbe"
                },
                "packageId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbf"
                }
              },
              "required": [
                "taskId",
                "id1",
                "id2",
                "userId",
                "packageId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task completed successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/reassignTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Reassign Task to User",
        "description": "Reassign a task to a user.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbc"
                }
              },
              "required": [
                "taskId",
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task reassigned successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/startTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Start Task",
        "description": "Start a task for a user and update task and equipment statuses.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "integer",
                  "example": 1
                },
                "taskId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                },
                "userId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbc"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbe"
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbf"
                }
              },
              "required": [
                "type",
                "taskId",
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task started successfully"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/generateGRNChallan": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Generate GRN Challan",
        "description": "Generate a GRN (Goods Receipt Note) Challan with random information and update job details.",
        "parameters": [
          {
            "name": "jobId",
            "in": "body",
            "description": "The ID of the job for which the GRN Challan is generated.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Generate a GRN (Goods Receipt Note) Challan with random information and update job details.",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GRN Challan generated successfully"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/outboundAssignPicker": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Assign a picker for an outbound task",
        "description": "Assign a picker to perform outbound tasks for a location.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "The ID of the user to be assigned as a picker.",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                },
                "note": {
                  "type": "string",
                  "description": "Additional notes for the assignment.",
                  "example": "Please complete the outbound tasks."
                },
                "skuDetails": {
                  "type": "array",
                  "description": "Details of SKUs (Stock Keeping Units) to be picked.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "skuId": {
                        "type": "string",
                        "description": "The ID of the SKU.",
                        "example": "64e09db3fe0f02a6b8cfffcc"
                      },
                      "quantity": {
                        "type": "integer",
                        "description": "The quantity of the SKU to be picked.",
                        "example": 10
                      },
                      "toBeOutbound": {
                        "type": "boolean",
                        "description": "Indicates whether the SKU is to be picked for outbound.",
                        "example": true
                      }
                    },
                    "required": [
                      "skuId",
                      "quantity",
                      "toBeOutbound"
                    ]
                  }
                },
                "locationId": {
                  "type": "string",
                  "description": "The ID of the location where the outbound task is assigned.",
                  "example": "64e09db3fe0f02a6b8cfffdd"
                },
                "jobId": {
                  "type": "string",
                  "description": "The ID of the job associated with the outbound task.",
                  "example": "64e09db3fe0f02a6b8cffeeb"
                },
                "consignmentId": {
                  "type": "string",
                  "description": "The ID of the consignment associated with the outbound task.",
                  "example": "64e09db3fe0f02a6b8cffeea"
                },
                "createdBy": {
                  "type": "string",
                  "description": "The ID of the user who created the assignment (optional).",
                  "example": "64e09db3fe0f02a6b8cffee1"
                }
              },
              "required": [
                "userId",
                "skuDetails",
                "locationId",
                "jobId",
                "consignmentId"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Task created and assigned successfully"
          },
          "404": {
            "description": "User not found or Location not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/crossDockingTask": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create and assign a cross-docking task",
        "description": "Create a cross-docking task and assign it to a user.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "integer",
                  "description": "The type of the task (e.g., 10 for Cross Docking).",
                  "example": 10
                },
                "userId": {
                  "type": "string",
                  "description": "The ID of the user to whom the task is assigned.",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                },
                "jobId": {
                  "type": "string",
                  "description": "The ID of the job associated with the task.",
                  "example": "64e09db3fe0f02a6b8cffeeb"
                },
                "packageDetails": {
                  "type": "array",
                  "description": "Details of packages to be processed in the task.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "The ID of the package.",
                        "example": "64e09db3fe0f02a6b8cfffcc"
                      }
                    },
                    "required": [
                      "_id"
                    ]
                  },
                  "example": [
                    {
                      "_id": "64e09db3fe0f02a6b8cfffcc"
                    }
                  ]
                },
                "equipmentId": {
                  "type": "string",
                  "description": "The ID of the equipment assigned to the task.",
                  "example": "64e09db3fe0f02a6b8cfffdd"
                },
                "locationId": {
                  "type": "string",
                  "description": "The ID of the location where the task is assigned.",
                  "example": "64e09db3fe0f02a6b8cffeea"
                },
                "time": {
                  "type": "string",
                  "description": "The time at which the task is assigned.",
                  "example": "10:00 AM"
                },
                "date": {
                  "type": "string",
                  "description": "The date on which the task is assigned.",
                  "example": "2023-09-01"
                },
                "note": {
                  "type": "string",
                  "description": "Additional notes for the task assignment.",
                  "example": "Please complete the cross-docking tasks."
                },
                "shipmentTo": {
                  "type": "string",
                  "description": "The shipment destination information.",
                  "example": "Customer XYZ"
                },
                "createdBy": {
                  "type": "string",
                  "description": "The ID of the user who created the assignment (optional).",
                  "example": "64e09db3fe0f02a6b8cffee1"
                }
              },
              "required": [
                "type",
                "userId",
                "jobId",
                "packageDetails",
                "equipmentId",
                "locationId",
                "time",
                "date",
                "note",
                "shipmentTo"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task created and assigned successfully"
          },
          "404": {
            "description": "User not found, Job not found, Equipment info not found, or Location info not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/task/cdTaskComplete": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Complete a cross-docking task",
        "description": "Complete a cross-docking task and update relevant data.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "schema": {
              "type": "object",
              "properties": {
                "packageId": {
                  "type": "string",
                  "description": "The ID of the package to be marked as completed.",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "taskId": {
                  "type": "string",
                  "description": "The ID of the task associated with the package.",
                  "example": "64e09db3fe0f02a6b8cffeeb"
                },
                "type": {
                  "type": "integer",
                  "description": "The type of the task (e.g., 1 for Put away, 2 for Sort, etc.).",
                  "example": 1
                },
                "userId": {
                  "type": "string",
                  "description": "The ID of the user completing the task.",
                  "example": "64e09db3fe0f02a6b8cffbbb"
                },
                "locationId": {
                  "type": "string",
                  "description": "The ID of the location where the task was completed.",
                  "example": "64e09db3fe0f02a6b8cffeea"
                },
                "createdBy": {
                  "type": "string",
                  "description": "The ID of the user who created the completion (optional).",
                  "example": "64e09db3fe0f02a6b8cffee1"
                }
              },
              "required": [
                "packageId",
                "taskId",
                "type",
                "userId",
                "locationId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task completed and collections updated successfully"
          },
          "400": {
            "description": "Validation error, Task information not found, Information Mismatched, or Location information not found"
          },
          "404": {
            "description": "Package not found, Task not found, or Client not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/create": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Create packages for a job",
        "description": "Create packages for a specific job and update relevant data.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "The ID of the job for which packages are created.",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "packageDetails": {
                  "type": "array",
                  "description": "An array of package details.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jobId": {
                        "type": "string",
                        "description": "The ID of the job associated with the package.",
                        "example": "64e09db3fe0f02a6b8cfffcc"
                      },
                      "packageMaterialType": {
                        "type": "string",
                        "description": "The material type of the package.",
                        "example": "Cardboard"
                      },
                      "msku": {
                        "type": "string",
                        "description": "The msku of the package.",
                        "example": "MSK12345"
                      },
                      "quantity": {
                        "type": "integer",
                        "description": "The quantity of products in the package.",
                        "example": 10
                      },
                      "weight": {
                        "type": "number",
                        "description": "The weight of the package.",
                        "example": 5.2
                      },
                      "unitKg": {
                        "type": "boolean",
                        "description": "Indicates if the weight is in kilograms (true) or not (false).",
                        "example": true
                      },
                      "packageLength": {
                        "type": "number",
                        "description": "The length of the package.",
                        "example": 30
                      },
                      "packageBreadth": {
                        "type": "number",
                        "description": "The breadth of the package.",
                        "example": 20
                      },
                      "unitMm": {
                        "type": "boolean",
                        "description": "Indicates if the dimensions are in millimeters (true) or not (false).",
                        "example": true
                      },
                      "materialType": {
                        "type": "string",
                        "description": "The type of material used for packaging.",
                        "example": "Plastic"
                      },
                      "expectedQuantity": {
                        "type": "integer",
                        "description": "The expected quantity of products in the package.",
                        "example": 10
                      },
                      "receivedQuantity": {
                        "type": "integer",
                        "description": "The received quantity of products in the package.",
                        "example": 10
                      },
                      "status": {
                        "type": "integer",
                        "description": "The status of the package (optional).",
                        "example": 1
                      },
                      "type": {
                        "type": "integer",
                        "description": "The type of package (optional).",
                        "example": 1
                      },
                      "wareHouseId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbe"
                      },
                      "companyUserId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbf"
                      }
                    },
                    "required": [
                      "jobId",
                      "packageMaterialType",
                      "msku",
                      "quantity",
                      "weight",
                      "unitKg",
                      "packageLength",
                      "packageBreadth",
                      "unitMm",
                      "materialType",
                      "expectedQuantity",
                      "receivedQuantity"
                    ]
                  }
                }
              },
              "required": [
                "jobId",
                "packageDetails"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages created successfully"
          },
          "400": {
            "description": "Job id missing or Validation error"
          },
          "404": {
            "description": "Job not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/list": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "List packages with filters",
        "description": "Retrieve a list of packages with optional filters.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "schema": {
              "type": "object",
              "properties": {
                "search": {
                  "type": "string",
                  "description": "Search term for filtering packages (optional).",
                  "example": "MSK12345"
                },
                "locationInfo": {
                  "type": "string",
                  "description": "Location information for filtering packages (optional).",
                  "example": "Warehouse A"
                },
                "approvedStatus": {
                  "type": "integer",
                  "description": "Status for filtering packages (optional). Use 0 to include all statuses.",
                  "example": 1
                },
                "taskStatus": {
                  "type": "string",
                  "description": "Status for filtering packages based on task status (optional).",
                  "example": "In Progress"
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbe"
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbf"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/getById": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Get a package by ID",
        "description": "Retrieve a package by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Package ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package retrieved successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Package not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/getDetailById": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Get detailed package information by ID",
        "description": "Retrieve detailed information about a package by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "packageId": {
                  "type": "string",
                  "description": "Package ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "packageId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package details retrieved successfully"
          },
          "400": {
            "description": "Validation error"
          },
          "404": {
            "description": "Package not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/update": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Update a package by ID",
        "description": "Update a package's information by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Package ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "msku": {
                  "type": "string",
                  "description": "New MSKU value",
                  "example": "MSK12345"
                },
                "quantity": {
                  "type": "integer",
                  "description": "New quantity value",
                  "example": 15
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package updated successfully"
          },
          "400": {
            "description": "Validation error or missing package ID"
          },
          "404": {
            "description": "Package not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/delete": {
      "delete": {
        "tags": [
          "Package"
        ],
        "summary": "Delete a package by ID",
        "description": "Delete a package by its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Package ID to delete",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                }
              },
              "required": [
                "_id"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Package deleted successfully"
          },
          "400": {
            "description": "Validation error or missing package ID"
          },
          "404": {
            "description": "Package not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/listByJobId": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "List packages by Job ID",
        "description": "Retrieve a list of packages by Job ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "description": "Job ID to retrieve packages",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "packageIds": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "An array of package IDs",
                    "example": [
                      "64e09db3fe0f02a6b8cfffcc",
                      "64e09db3fe0f02a6b8cfffdd"
                    ]
                  }
                },
                "required": [
                  "jobId"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully"
          },
          "400": {
            "description": "Validation error or missing Job ID"
          },
          "404": {
            "description": "No packages found for the provided Job ID"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/quantityVerification": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Verify package quantities",
        "description": "Verify the quantities of packages and save approved and defected packages.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "description": "Job ID",
                  "example": "64d5c2f31a399375fee7100d"
                },
                "consignmentId": {
                  "type": "string",
                  "description": "Consignment ID",
                  "example": "WMCI0001"
                },
                "quantityDetail": {
                  "type": "array",
                  "description": "Array of package quantity details",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Package type",
                        "example": "Pallete-001"
                      },
                      "msku": {
                        "type": "string",
                        "description": "MSKU",
                        "example": "Laptop"
                      },
                      "productCount": {
                        "type": "integer",
                        "description": "Product count",
                        "example": 20
                      },
                      "weight": {
                        "type": "number",
                        "description": "Weight",
                        "example": 100
                      },
                      "height": {
                        "type": "number",
                        "description": "Height",
                        "example": 2000
                      },
                      "breadth": {
                        "type": "number",
                        "description": "Breadth",
                        "example": 4000
                      },
                      "unitLBH": {
                        "type": "string",
                        "description": "Unit (LBH)",
                        "example": "Centimeters(cm)"
                      },
                      "unitW": {
                        "type": "string",
                        "description": "Unit (Weight)",
                        "example": "Kilograms(kg)"
                      },
                      "length": {
                        "type": "number",
                        "description": "Length",
                        "example": 3000
                      },
                      "expectedQuantity": {
                        "type": "integer",
                        "description": "Expected quantity",
                        "example": 100
                      },
                      "expectedProductCount": {
                        "type": "integer",
                        "description": "Expected product count",
                        "example": 2000
                      },
                      "locationId": {
                        "type": "string",
                        "description": "Location ID",
                        "example": "64ca4208f8e419ef83474aab"
                      },
                      "approvedQuantity": {
                        "type": "integer",
                        "description": "Approved quantity",
                        "example": 0
                      },
                      "missedQuantity": {
                        "type": "integer",
                        "description": "Missed quantity",
                        "example": 0
                      },
                      "defectedQuantity": {
                        "type": "integer",
                        "description": "Defected quantity",
                        "example": 0
                      }
                    },
                    "required": [
                      "type",
                      "msku",
                      "productCount",
                      "weight",
                      "height",
                      "breadth",
                      "unitLBH",
                      "unitW",
                      "length",
                      "expectedQuantity",
                      "expectedProductCount",
                      "locationId",
                      "approvedQuantity",
                      "missedQuantity",
                      "defectedQuantity"
                    ]
                  }
                }
              },
              "required": [
                "_id",
                "consignmentId",
                "quantityDetail"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Packages saved successfully"
          },
          "400": {
            "description": "Validation error or missing Job ID or no packages to save"
          },
          "404": {
            "description": "Job not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/addToCart": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Add a package to the user's cart",
        "description": "Add a package to the user's cart and update its cart status.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "packageId": {
                  "type": "string",
                  "description": "Package ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "userId": {
                  "type": "string",
                  "description": "User ID",
                  "example": "64e09db3fe0f02a6b8cfffdd"
                },
                "type": {
                  "type": "string",
                  "description": "Task Type",
                  "example": "Task A"
                }
              },
              "required": [
                "packageId",
                "userId",
                "type"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data added to cart successfully"
          },
          "404": {
            "description": "Package not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/selectBin": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Select a bin for a package",
        "description": "Select a bin for a package using its ID.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "packageId": {
                  "type": "string",
                  "description": "Package ID",
                  "example": "64e45c4bdb963e55fa65d2b2"
                },
                "jobId": {
                  "type": "string",
                  "description": "Job ID",
                  "example": "64e4549bdb963e55fa65cc22"
                },
                "consignmentId": {
                  "type": "string",
                  "description": "Consignment ID",
                  "example": "WMRO0034"
                },
                "selectedBin": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64e4378cdb963e55fa65bda6"
                      },
                      "rackGroupId": {
                        "type": "string",
                        "example": "64e43747db963e55fa65bd94"
                      },
                      "rackGroupName": {
                        "type": "string",
                        "example": "3 x 3 standard rack"
                      },
                      "name": {
                        "type": "string",
                        "example": "zone 2-R1-S1-B1"
                      },
                      "zoneId": {
                        "type": "string",
                        "example": "64e4377adb963e55fa65bd98"
                      },
                      "zoneName": {
                        "type": "string",
                        "example": "zone 2"
                      },
                      "rackId": {
                        "type": "string",
                        "example": "64e4378cdb963e55fa65bda2"
                      },
                      "rackName": {
                        "type": "string",
                        "example": "zone 2-R1"
                      },
                      "shelfId": {
                        "type": "string",
                        "example": "64e4378cdb963e55fa65bda4"
                      },
                      "shelfName": {
                        "type": "string",
                        "example": "zone 2-R1-S1.1"
                      },
                      "type": {
                        "type": "string",
                        "example": "Bulking Storage"
                      },
                      "status": {
                        "type": "integer",
                        "example": 1
                      },
                      "packageDetail": {
                        "type": "array",
                        "example": []
                      },
                      "wareHouseId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbe"
                      },
                      "companyUserId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbf"
                      }
                    },
                    "required": [
                      "_id",
                      "rackGroupId",
                      "rackGroupName",
                      "name",
                      "zoneId",
                      "zoneName",
                      "rackId",
                      "rackName",
                      "shelfId",
                      "shelfName",
                      "type",
                      "status",
                      "packageDetail"
                    ]
                  }
                }
              },
              "required": [
                "packageId",
                "jobId",
                "consignmentId",
                "selectedBin"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Bin selected successfully"
          },
          "400": {
            "description": "Bin selection failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/repackage": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Create a repackage task",
        "description": "Create a repackage task for a package",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "description": "User ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "existingPackageDetail": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "Existing Package ID",
                        "example": "64e09db3fe0f02a6b8cfffcc"
                      },
                      "jobId": {
                        "type": "string",
                        "description": "Job ID",
                        "example": "64e09db3fe0f02a6b8cfffcc"
                      },
                      "type": {
                        "type": "string",
                        "description": "Package Type",
                        "example": "Type A"
                      },
                      "msku": {
                        "type": "string",
                        "description": "MSKU",
                        "example": "MSKU123"
                      },
                      "approvedProductCount": {
                        "type": "integer",
                        "description": "Approved Product Count",
                        "example": 100
                      },
                      "consumedProductCount": {
                        "type": "integer",
                        "description": "Consumed Product Count",
                        "example": 20
                      },
                      "alterPackageCount": {
                        "type": "integer",
                        "description": "New Package Count",
                        "example": 10
                      },
                      "wareHouseId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbe"
                      },
                      "companyUserId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbf"
                      }
                    },
                    "required": [
                      "_id",
                      "jobId",
                      "type",
                      "msku",
                      "approvedProductCount",
                      "consumedProductCount",
                      "alterPackageCount"
                    ]
                  }
                }
              },
              "required": [
                "userId",
                "existingPackageDetail",
                "newpackageDetail"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Task created successfully"
          },
          "404": {
            "description": "User not found or Package not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/package/repackageComplete": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Complete a repackaging task",
        "description": "Complete a repackaging task for packages",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request Body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "taskId": {
                  "type": "string",
                  "description": "Task ID",
                  "example": "64e09db3fe0f02a6b8cfffcc"
                },
                "existingPackageDetail": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "description": "Existing Package ID",
                        "example": "64e09db3fe0f02a6b8cfffcc"
                      },
                      "consumedProductCount": {
                        "type": "integer",
                        "description": "Consumed Product Count",
                        "example": 20
                      },
                      "alterPackageCount": {
                        "type": "integer",
                        "description": "New Package Count",
                        "example": 10
                      },
                      "approvedProductCount": {
                        "type": "integer",
                        "description": "Approved Product Count",
                        "example": 80
                      }
                    },
                    "required": [
                      "_id",
                      "consumedProductCount",
                      "alterPackageCount",
                      "approvedProductCount"
                    ]
                  }
                },
                "newPackageDetail": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "msku": {
                        "type": "string",
                        "description": "MSKU",
                        "example": "MSKU456"
                      },
                      "type": {
                        "type": "string",
                        "description": "Package Type",
                        "example": "Type B"
                      },
                      "newPackageCount": {
                        "type": "integer",
                        "description": "New Package Count",
                        "example": 5
                      },
                      "newProductCount": {
                        "type": "integer",
                        "description": "New Product Count",
                        "example": 50
                      }
                    },
                    "required": [
                      "msku",
                      "type",
                      "newPackageCount",
                      "newProductCount"
                    ]
                  }
                }
              },
              "required": [
                "taskId",
                "existingPackageDetail",
                "newPackageDetail"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Repackaging completed successfully"
          },
          "500": {
            "description": "An error occurred during repackaging completion"
          }
        }
      }
    },
    "/package/packageResponse": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Receive package response",
        "description": "Receive a package response",
        "parameters": [
          {
            "name": "requestData",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64d7192d1a399375fee74e5e",
                  "description": "Unique identifier for the package."
                },
                "jobId": {
                  "type": "string",
                  "example": "64d718e01a399375fee74dd9",
                  "description": "Identifier for the associated job."
                },
                "consignmentId": {
                  "type": "string",
                  "example": "WMCI0003",
                  "description": "Identifier for the consignment."
                },
                "selectedBin": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [],
                  "description": "Array of selected bins."
                },
                "description": {
                  "type": "string",
                  "example": "",
                  "description": "Package description."
                },
                "msku": {
                  "type": "string",
                  "example": "Laptop",
                  "description": "MSKU (Merchant Stock Keeping Unit) of the package."
                },
                "weight": {
                  "type": "string",
                  "example": "100",
                  "description": "Weight of the package."
                },
                "length": {
                  "type": "string",
                  "example": "3000",
                  "description": "Length of the package."
                },
                "breadth": {
                  "type": "string",
                  "example": "4000",
                  "description": "Breadth of the package."
                },
                "status": {
                  "type": "integer",
                  "example": 0,
                  "description": "Status of the package."
                },
                "approvedStatus": {
                  "type": "integer",
                  "example": 1,
                  "description": "Approved status of the package."
                },
                "expectedQuantity": {
                  "type": "string",
                  "example": "100",
                  "description": "Expected quantity of the package."
                },
                "approvedQuantity": {
                  "type": "string",
                  "example": "90",
                  "description": "Approved quantity of the package."
                },
                "type": {
                  "type": "string",
                  "example": "Pallete-001",
                  "description": "Type of the package."
                },
                "defectedQuantity": {
                  "type": "string",
                  "example": "0",
                  "description": "Defected quantity of the package."
                },
                "qrCode": {
                  "type": "string",
                  "example": "inbound/WMCI0003/64d7192d1a399375fee74e5e_Package_QR.jpeg",
                  "description": "QR code for the package."
                },
                "productCount": {
                  "type": "integer",
                  "example": 20,
                  "description": "Product count in the package."
                },
                "approvedProductCount": {
                  "type": "integer",
                  "example": 1800,
                  "description": "Approved product count in the package."
                },
                "locationInfo": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "64d08674121a2253e923bb37",
                      "description": "Unique identifier for the location."
                    },
                    "name": {
                      "type": "string",
                      "example": "Temp Inbound",
                      "description": "Name of the location."
                    },
                    "qrCode": {
                      "type": "string",
                      "example": "location_qr/64d08674121a2253e923bb37_Location_QR.jpeg",
                      "description": "QR code for the location."
                    }
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "An error occurred while receiving the package response"
          }
        }
      }
    },
    "/package/checkPackage": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Check if a package exists in the user's cart",
        "description": "Check if a package with the specified packageId exists in the user's cart.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request body containing packageId and userId.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "packageId": {
                  "type": "string",
                  "example": "64d7192d1a399375fee74e5e",
                  "description": "Unique identifier of the package to check."
                },
                "userId": {
                  "type": "string",
                  "example": "64d718e01a399375fee74dd9",
                  "description": "Unique identifier of the user's cart to check."
                }
              },
              "required": [
                "packageId",
                "userId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Package does not exist in the cart"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/outbound/create": {
      "post": {
        "tags": [
          "Outbound"
        ],
        "summary": "Create a new job",
        "description": "Create a new inbound job",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request body containing clientId and wareHouseId.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "example": "64d363210bdf3c9a81ce23eb",
                  "description": "Unique identifier of the client."
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64db6343bd8c146e9f71904e",
                  "description": "Unique identifier of the warehouse."
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbf"
                }
              },
              "required": [
                "clientId",
                "wareHouseId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/outbound/consignmentDetailById": {
      "post": {
        "tags": [
          "Outbound"
        ],
        "summary": "Get consignment details by jobId",
        "description": "Get details of a consignment by jobId",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request body containing jobId.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "jobId": {
                  "type": "string",
                  "example": "64d7192d1a399375fee74e5e",
                  "description": "Unique identifier of the job."
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbe"
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbf"
                }
              },
              "required": [
                "jobId"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/outbound/updatePackageDetailsWithTask": {
      "post": {
        "tags": [
          "Outbound"
        ],
        "summary": "Update package details with task",
        "description": "Update package details and create a task with the provided details.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request body containing package details and related information.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "example": "64d718e01a399375fee74dd9",
                  "description": "Unique identifier of the user."
                },
                "locationId": {
                  "type": "string",
                  "example": "64d08674121a2253e923bb37",
                  "description": "Unique identifier of the location."
                },
                "packageDetails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "jobId": {
                        "type": "string",
                        "example": "64d7192d1a399375fee74e5e",
                        "description": "Unique identifier of the job."
                      },
                      "consignmentId": {
                        "type": "string",
                        "example": "WMCI0003",
                        "description": "Identifier of the consignment."
                      }
                    }
                  }
                },
                "note": {
                  "type": "string",
                  "example": "Package update note",
                  "description": "Additional note for the package update (optional)."
                }
              },
              "required": [
                "userId",
                "locationId",
                "packageDetails"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/outbound/skuCreate": {
      "post": {
        "tags": [
          "Outbound"
        ],
        "summary": "Create or update SKU details for a job",
        "description": "Create or update SKU details for a specific job, including quantity, selected bins, and more.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content type of the request body",
            "required": true,
            "type": "string",
            "enum": [
              "application/json",
              "multipart/form-data"
            ],
            "default": "application/json"
          },
          {
            "name": "_id",
            "in": "formData",
            "description": "Unique identifier of the job to create or update SKU details.",
            "required": true,
            "type": "string",
            "example": "64df44fd412774c160654bdb"
          },
          {
            "name": "excelFile",
            "in": "formData",
            "description": "Excel file containing SKU details. Required if SKU details are not provided in the request body.",
            "required": true,
            "type": "file"
          },
          {
            "name": "wareHouseId",
            "in": "formData",
            "description": "Unique identifier of the warehouse.",
            "required": true,
            "type": "string",
            "example": "64e09db3fe0f02a6b8cffbb9"
          },
          {
            "name": "companyUserId",
            "in": "formData",
            "description": "Unique identifier of the company user.",
            "required": true,
            "type": "string",
            "example": "64df682c87b8dae6f4a40db5"
          },
          {
            "name": "skuDetails",
            "in": "body",
            "description": "JSON object containing SKU details. Use this for 'application/json' Content-Type requests.",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64df44fd412774c160654bdb"
                },
                "skuDetails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64df4503110a67d6a9d69f1a"
                      },
                      "msku": {
                        "type": "string",
                        "example": "Laptop"
                      },
                      "title": {
                        "type": "string",
                        "example": "Laptop Title"
                      },
                      "toBeOutbound": {
                        "type": "integer",
                        "example": 45
                      },
                      "uom": {
                        "type": "string",
                        "example": "Each"
                      }
                    }
                  }
                },
                "wareHouseId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbe"
                },
                "companyUserId": {
                  "type": "string",
                  "example": "64e09db3fe0f02a6b8cffbbf"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/outbound/skuUpdate": {
      "post": {
        "tags": [
          "Outbound"
        ],
        "summary": "Update SKU details for a job",
        "description": "Update SKU details for a specific job, including quantity, selected bins, and more.",
        "parameters": [
          {
            "name": "requestBody",
            "in": "body",
            "description": "Request body containing the job ID and SKU details to update.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64df44fd412774c160654bdb",
                  "description": "Unique identifier of the job to update."
                },
                "skuDetails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64df4503110a67d6a9d69f1a",
                        "description": "Unique identifier of the SKU detail to update."
                      },
                      "msku": {
                        "type": "string",
                        "example": "Laptop",
                        "description": "MSKU (Merchant Stock Keeping Unit) of the SKU."
                      },
                      "toBeOutbound": {
                        "type": "integer",
                        "example": 45,
                        "description": "Quantity to be outbound."
                      },
                      "selectedBin": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "Z1-R3-S1-B1",
                          "Z1-R3-S1-B2"
                        ],
                        "description": "Array of selected bins."
                      },
                      "approvedProductCount": {
                        "type": "integer",
                        "example": 5,
                        "description": "Approved product count."
                      },
                      "wareHouseId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbe"
                      },
                      "companyUserId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbf"
                      }
                    }
                  }
                }
              },
              "required": [
                "_id",
                "skuDetails"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/outbound/skuDelete": {
      "delete": {
        "tags": [
          "Outbound"
        ],
        "summary": "Delete SKU detail from a job",
        "description": "Delete a specific SKU detail from a job based on the job ID and SKU details ID.",
        "parameters": [
          {
            "name": "_id",
            "in": "body",
            "description": "Unique identifier of the job from which to delete the SKU detail.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "64df44fd412774c160654bdb"
                },
                "skuDetailsId": {
                  "type": "string",
                  "example": "64df4503110a67d6a9d69f1a"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/outbound/load": {
      "post": {
        "tags": [
          "Outbound"
        ],
        "summary": "Assign a load task",
        "description": "Assign a load task to a user for a specific job.",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Load task details.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "note": {
                  "type": "string",
                  "example": "Load task note"
                },
                "userId": {
                  "type": "string",
                  "example": "64df44fd412774c160654bdb"
                },
                "jobId": {
                  "type": "string",
                  "example": "64df44fd412774c160654bdb"
                },
                "packageDetails": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "_id": {
                        "type": "string",
                        "example": "64df4503110a67d6a9d69f1a"
                      },
                      "type": {
                        "type": "integer",
                        "example": 9
                      },
                      "msku": {
                        "type": "string",
                        "example": "Laptop"
                      },
                      "toBeOutbound": {
                        "type": "integer",
                        "example": 45
                      },
                      "selectedBin": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "example": "Z1-R3-S1-B1"
                        }
                      },
                      "wareHouseId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbe"
                      },
                      "companyUserId": {
                        "type": "string",
                        "example": "64e09db3fe0f02a6b8cffbbf"
                      }
                    }
                  }
                },
                "vehicleNo": {
                  "type": "string",
                  "example": "ABC123"
                },
                "containerNo": {
                  "type": "string",
                  "example": "XYZ789"
                },
                "locationId": {
                  "type": "string",
                  "example": "64df44fd412774c160654bdb"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}